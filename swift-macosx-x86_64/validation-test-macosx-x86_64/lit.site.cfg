# swift/validation-test/lit.site.cfg.in ---------------------------*- python -*-
#
# This source file is part of the Swift.org open source project
#
# Copyright (c) 2014 - 2017 Apple Inc. and the Swift project authors
# Licensed under Apache License v2.0 with Runtime Library Exception
#
# See https://swift.org/LICENSE.txt for license information
# See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
#
# -----------------------------------------------------------------------------

import sys
import platform

config.llvm_src_root = "/Users/zhuzhenhua/Documents/SwiftSourceCode/llvm"
config.llvm_obj_root = "/Users/zhuzhenhua/Documents/SwiftSourceCode/build/Xcode-ReleaseAssert/llvm-macosx-x86_64"
config.llvm_tools_dir = "/Users/zhuzhenhua/Documents/SwiftSourceCode/build/Xcode-ReleaseAssert/llvm-macosx-x86_64/%(build_mode)s/bin"
config.llvm_libs_dir = "/Users/zhuzhenhua/Documents/SwiftSourceCode/build/Xcode-ReleaseAssert/llvm-macosx-x86_64/%(build_mode)s/lib"
config.llvm_code_generators = "X86;ARM;AArch64;PowerPC;SystemZ;Mips".split(";")
config.lit_tools_dir = ""
config.swift_src_root = "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift"
config.swift_obj_root = "/Users/zhuzhenhua/Documents/SwiftSourceCode/build/Xcode-ReleaseAssert/swift-macosx-x86_64"
config.target_triple = "x86_64-apple-macosx10.9"
config.variant_triple = "x86_64-apple-macosx10.9"
config.variant_suffix = "-macosx-x86_64"
config.variant_sdk = "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk"
config.swift_test_results_dir = \
    lit_config.params.get("swift_test_results_dir", "/Users/zhuzhenhua/Documents/SwiftSourceCode/build/Xcode-ReleaseAssert/swift-macosx-x86_64/$(CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)/swift-test-results/x86_64-apple-macosx10.9")

# --- Darwin Configuration ---
config.darwin_xcrun_toolchain = "default"

# --- Android Configuration ---
config.android_ndk_path = ""
config.android_ndk_gcc_version = ""

# --- Windows MSVC Configuration ---
config.swift_stdlib_msvc_runtime = None
if "MultiThreadedDLL" == "MultiThreaded":
    config.swift_stdlib_msvc_runtime = 'MT'
elif "MultiThreadedDLL" == "MultiThreadedDebug":
    config.swift_stdlib_msvc_runtime = 'MTd'
elif "MultiThreadedDLL" == "MultiThreadedDLL":
    config.swift_stdlib_msvc_runtime = 'MD'
elif "MultiThreadedDLL" == "MultiThreadedDebugDLL":
    config.swift_stdlib_msvc_runtime = 'MDd'
else:
    assert(False)

config.coverage_mode = "FALSE"
config.lldb_build_root = ""
config.libdispatch_build_path = "/Users/zhuzhenhua/Documents/SwiftSourceCode/build/Xcode-ReleaseAssert/libdispatch-macosx-x86_64"

if "FALSE" == "TRUE":
    config.available_features.add("asan")
else:
    config.available_features.add('no_asan')

if "".lower() in ["full", "thin"]:
   config.available_features.add("lto")
else:
   config.available_features.add("no_lto")

if "TRUE" == "TRUE":
    config.available_features.add('asserts')
else:
    config.available_features.add('no_asserts')

# If tools have debug info, set the tools-debuginfo flag.
if "Release" in ["Debug", "RelWithDebInfo"]:
    config.available_features.add('tools-debuginfo')

# If tools are release-mode, set the tools-release flag.
if "Release" in ["Release", "RelWithDebInfo"]:
    config.available_features.add('tools-release')

if "TRUE" == "TRUE":
    config.available_features.add('swift_stdlib_asserts')
else:
    config.available_features.add('swift_stdlib_no_asserts')

if "TRUE" == "TRUE":
    config.available_features.add("optimized_stdlib")

if "TRUE" == "TRUE":
    config.available_features.add('sourcekit')

if "FALSE" == "TRUE":
    config.available_features.add("nonatomic_rc")

if "Xcode" == "Xcode":
    xcode_bin_dir = os.path.join(config.llvm_obj_root, "Release",
                                 'bin')
    lit_config.note('Adding to path: ' + xcode_bin_dir)
    config.environment['PATH'] = \
      os.path.pathsep.join((xcode_bin_dir, config.environment['PATH']))

config.available_features.add("CMAKE_GENERATOR=Xcode")

if "TRUE" == "TRUE":
    config.android_linker_name = "lld"
else:
    # even if SWIFT_ENABLE_GOLD_LINKER isn't set, we cannot use BFD for Android
    config.android_linker_name = "gold"

# Let the main config do the real work.
config.test_exec_root = os.path.dirname(os.path.realpath(__file__))
lit_config.load_config(config, "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/validation-test/lit.cfg")
