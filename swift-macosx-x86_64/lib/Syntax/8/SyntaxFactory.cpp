#line 6 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
//// Automatically Generated From SyntaxFactory.cpp.gyb.
//// Do Not Edit Directly!
//===--------- SyntaxFactory.cpp - Syntax Factory implementations ---------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2017 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//
//
// This file defines the SyntaxFactory, one of the most important client-facing
// types in lib/Syntax and likely to be very commonly used.
//
// Effectively a namespace, SyntaxFactory is never instantiated, but is *the*
// one-stop shop for making new Syntax nodes. Putting all of these into a
// collection of static methods provides a single point of API lookup for
// clients' convenience and also allows the library to hide all of the
// constructors for all Syntax nodes, as the SyntaxFactory is friend to all.
//
//===----------------------------------------------------------------------===//

#include "swift/Syntax/SyntaxFactory.h"
#include "swift/Syntax/SyntaxNodes.h"
#include "swift/Syntax/Trivia.h"
#include "llvm/ADT/ArrayRef.h"

#include <vector>

using namespace swift;
using namespace swift::syntax;

TokenSyntax SyntaxFactory::makeToken(tok Kind, OwnedString Text,
                                     const Trivia &LeadingTrivia,
                                     const Trivia &TrailingTrivia,
                                     SourcePresence Presence,
                                     RC<SyntaxArena> Arena) {
  return make<TokenSyntax>(RawSyntax::make(Kind, Text, LeadingTrivia.Pieces,
                                           TrailingTrivia.Pieces, Presence,
                                           Arena));
}

UnknownSyntax
SyntaxFactory::makeUnknownSyntax(llvm::ArrayRef<TokenSyntax> Tokens,
                                 RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> Layout;
  Layout.reserve(Tokens.size());
  for (auto &Token : Tokens) {
    Layout.push_back(Token.getRaw());
  }
  auto Raw = RawSyntax::make(SyntaxKind::Unknown, Layout,
                             SourcePresence::Present, Arena);
  return make<UnknownSyntax>(Raw);
}

Syntax SyntaxFactory::makeBlankCollectionSyntax(SyntaxKind Kind) {
  switch(Kind) {
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::CodeBlockItemList: return makeBlankCodeBlockItemList();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::FunctionCallArgumentList: return makeBlankFunctionCallArgumentList();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TupleElementList: return makeBlankTupleElementList();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ArrayElementList: return makeBlankArrayElementList();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::DictionaryElementList: return makeBlankDictionaryElementList();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::StringLiteralSegments: return makeBlankStringLiteralSegments();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::DeclNameArgumentList: return makeBlankDeclNameArgumentList();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ExprList: return makeBlankExprList();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ClosureCaptureItemList: return makeBlankClosureCaptureItemList();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ClosureParamList: return makeBlankClosureParamList();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ObjcName: return makeBlankObjcName();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::FunctionParameterList: return makeBlankFunctionParameterList();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::IfConfigClauseList: return makeBlankIfConfigClauseList();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::InheritedTypeList: return makeBlankInheritedTypeList();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::MemberDeclList: return makeBlankMemberDeclList();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ModifierList: return makeBlankModifierList();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AccessPath: return makeBlankAccessPath();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AccessorList: return makeBlankAccessorList();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PatternBindingList: return makeBlankPatternBindingList();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::EnumCaseElementList: return makeBlankEnumCaseElementList();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::IdentifierList: return makeBlankIdentifierList();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PrecedenceGroupAttributeList: return makeBlankPrecedenceGroupAttributeList();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PrecedenceGroupNameList: return makeBlankPrecedenceGroupNameList();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TokenList: return makeBlankTokenList();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::NonEmptyTokenList: return makeBlankNonEmptyTokenList();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AttributeList: return makeBlankAttributeList();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::SpecializeAttributeSpecList: return makeBlankSpecializeAttributeSpecList();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ObjCSelector: return makeBlankObjCSelector();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::SwitchCaseList: return makeBlankSwitchCaseList();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::CatchClauseList: return makeBlankCatchClauseList();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::CaseItemList: return makeBlankCaseItemList();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ConditionElementList: return makeBlankConditionElementList();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::GenericRequirementList: return makeBlankGenericRequirementList();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::GenericParameterList: return makeBlankGenericParameterList();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::CompositionTypeElementList: return makeBlankCompositionTypeElementList();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TupleTypeElementList: return makeBlankTupleTypeElementList();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::GenericArgumentList: return makeBlankGenericArgumentList();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TuplePatternElementList: return makeBlankTuplePatternElementList();
#line 68 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AvailabilitySpecList: return makeBlankAvailabilitySpecList();
#line 71 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  default: break;
  }
  llvm_unreachable("not collection kind.");
}

std::pair<unsigned, unsigned>
SyntaxFactory::countChildren(SyntaxKind Kind){
  switch(Kind) {
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::Decl:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {0, 0};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::Expr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {0, 0};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::Stmt:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {0, 0};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::Type:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {0, 0};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::Pattern:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {0, 0};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::UnknownDecl:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {0, 0};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::UnknownExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {0, 0};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::UnknownStmt:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {0, 0};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::UnknownType:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {0, 0};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::UnknownPattern:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {0, 0};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::CodeBlockItem:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 3};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::CodeBlock:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 3};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::InOutExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PoundColumnExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 1};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TryExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 3};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::DeclNameArgument:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::DeclNameArguments:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 3};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::IdentifierExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::SuperRefExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 1};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::NilLiteralExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 1};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::DiscardAssignmentExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 1};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AssignmentExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 1};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::SequenceExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 1};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PoundLineExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 1};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PoundFileExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 1};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PoundFunctionExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 1};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PoundDsohandleExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 1};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::SymbolicReferenceExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PrefixOperatorExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::BinaryOperatorExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 1};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ArrowExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::FloatLiteralExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 1};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TupleExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 3};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ArrayExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 3};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::DictionaryExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 3};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::FunctionCallArgument:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 4};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TupleElement:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 4};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ArrayElement:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::DictionaryElement:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 4};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::IntegerLiteralExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 1};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::BooleanLiteralExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 1};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TernaryExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {5, 5};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::MemberAccessExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 4};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::IsExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AsExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 3};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TypeExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 1};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ClosureCaptureItem:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 5};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ClosureCaptureSignature:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 3};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ClosureParam:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ClosureSignature:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 5};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ClosureExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 4};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::UnresolvedPatternExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 1};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::FunctionCallExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 5};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::SubscriptExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {4, 5};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::OptionalChainingExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ForcedValueExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PostfixUnaryExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::SpecializeExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::StringSegment:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 1};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ExpressionSegment:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {4, 5};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::StringLiteralExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 5};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::KeyPathExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 3};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::KeyPathBaseExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 1};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ObjcNamePiece:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ObjcKeyPathExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {4, 4};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ObjcSelectorExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {4, 6};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::EditorPlaceholderExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 1};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ObjectLiteralExpr:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {4, 4};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TypeInitializerClause:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TypealiasDecl:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 7};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AssociatedtypeDecl:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 7};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ParameterClause:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 3};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ReturnClause:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::FunctionSignature:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 3};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::IfConfigClause:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 3};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::IfConfigDecl:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PoundErrorDecl:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {4, 4};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PoundWarningDecl:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {4, 4};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PoundSourceLocation:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 4};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PoundSourceLocationArgs:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {7, 7};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::DeclModifier:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 4};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::InheritedType:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TypeInheritanceClause:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ClassDecl:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 8};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::StructDecl:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 8};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ProtocolDecl:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 7};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ExtensionDecl:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 7};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::MemberDeclBlock:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 3};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::MemberDeclListItem:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::SourceFile:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::InitializerClause:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::FunctionParameter:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {0, 8};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::FunctionDecl:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 8};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::InitializerDecl:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 9};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::DeinitializerDecl:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 4};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::SubscriptDecl:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 8};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AccessLevelModifier:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 4};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AccessPathComponent:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ImportDecl:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 5};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AccessorParameter:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 3};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AccessorDecl:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 5};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AccessorBlock:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 3};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PatternBinding:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 5};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::VariableDecl:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 4};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::EnumCaseElement:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 4};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::EnumCaseDecl:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 4};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::EnumDecl:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 8};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::OperatorDecl:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 5};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::OperatorPrecedenceAndTypes:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PrecedenceGroupDecl:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {5, 7};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PrecedenceGroupRelation:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 3};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PrecedenceGroupNameElement:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PrecedenceGroupAssignment:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 3};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PrecedenceGroupAssociativity:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 3};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::CustomAttribute:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 5};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::Attribute:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 6};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::LabeledSpecializeEntry:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 4};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::NamedAttributeStringArgument:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 3};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::DeclName:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ImplementsAttributeArguments:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 4};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ObjCSelectorPiece:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {0, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ContinueStmt:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::WhileStmt:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 5};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::DeferStmt:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ExpressionStmt:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 1};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::RepeatWhileStmt:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {4, 6};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::GuardStmt:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {4, 4};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::WhereClause:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ForInStmt:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {5, 10};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::SwitchStmt:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {5, 7};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::DoStmt:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 5};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ReturnStmt:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::YieldStmt:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::YieldList:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 4};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::FallthroughStmt:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 1};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::BreakStmt:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ConditionElement:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AvailabilityCondition:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {4, 4};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::MatchingPatternCondition:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 4};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::OptionalBindingCondition:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 4};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::DeclarationStmt:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 1};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ThrowStmt:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::IfStmt:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 7};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ElseIfContinuation:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 1};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ElseBlock:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::SwitchCase:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 3};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::SwitchDefaultLabel:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::CaseItem:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 3};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::SwitchCaseLabel:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 3};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::CatchClause:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 4};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PoundAssertStmt:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {4, 6};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::GenericWhereClause:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::SameTypeRequirement:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 4};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::GenericParameter:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 5};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::GenericParameterClause:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 3};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ConformanceRequirement:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 4};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::SimpleTypeIdentifier:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::MemberTypeIdentifier:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 4};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ClassRestrictionType:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 1};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ArrayType:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 3};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::DictionaryType:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {5, 5};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::MetatypeType:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 3};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::OptionalType:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::SomeType:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ImplicitlyUnwrappedOptionalType:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::CompositionTypeElement:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::CompositionType:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 1};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TupleTypeElement:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 8};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TupleType:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 3};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::FunctionType:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {5, 6};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AttributedType:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 3};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::GenericArgument:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::GenericArgumentClause:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 3};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TypeAnnotation:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::EnumCasePattern:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 4};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::IsTypePattern:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::OptionalPattern:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::IdentifierPattern:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 1};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AsTypePattern:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 3};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TuplePattern:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 3};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::WildcardPattern:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TuplePatternElement:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 4};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ExpressionPattern:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 1};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ValueBindingPattern:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AvailabilityArgument:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AvailabilityLabeledArgument:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {3, 3};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AvailabilityVersionRestriction:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {2, 2};
#line 81 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::VersionTuple:
#line 84 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return {1, 3};
#line 87 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  default:
  llvm_unreachable("bad syntax kind.");
  }
}

bool SyntaxFactory::canServeAsCollectionMemberRaw(SyntaxKind CollectionKind,
                                                  SyntaxKind MemberKind) {
  switch (CollectionKind) {
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::CodeBlockItemList:
#line 105 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return CodeBlockItemSyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::FunctionCallArgumentList:
#line 105 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return FunctionCallArgumentSyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TupleElementList:
#line 105 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return TupleElementSyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ArrayElementList:
#line 105 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return ArrayElementSyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::DictionaryElementList:
#line 105 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return DictionaryElementSyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::StringLiteralSegments:
#line 103 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return StringSegmentSyntax::kindof(MemberKind) || ExpressionSegmentSyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::DeclNameArgumentList:
#line 105 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return DeclNameArgumentSyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ExprList:
#line 105 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return ExprSyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ClosureCaptureItemList:
#line 105 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return ClosureCaptureItemSyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ClosureParamList:
#line 105 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return ClosureParamSyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ObjcName:
#line 105 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return ObjcNamePieceSyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::FunctionParameterList:
#line 105 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return FunctionParameterSyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::IfConfigClauseList:
#line 105 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return IfConfigClauseSyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::InheritedTypeList:
#line 105 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return InheritedTypeSyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::MemberDeclList:
#line 105 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return MemberDeclListItemSyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ModifierList:
#line 105 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return DeclModifierSyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AccessPath:
#line 105 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return AccessPathComponentSyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AccessorList:
#line 105 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return AccessorDeclSyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PatternBindingList:
#line 105 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return PatternBindingSyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::EnumCaseElementList:
#line 105 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return EnumCaseElementSyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::IdentifierList:
#line 105 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return TokenSyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PrecedenceGroupAttributeList:
#line 103 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return PrecedenceGroupRelationSyntax::kindof(MemberKind) || PrecedenceGroupAssignmentSyntax::kindof(MemberKind) || PrecedenceGroupAssociativitySyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PrecedenceGroupNameList:
#line 105 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return PrecedenceGroupNameElementSyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TokenList:
#line 105 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return TokenSyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::NonEmptyTokenList:
#line 105 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return TokenSyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AttributeList:
#line 103 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return AttributeSyntax::kindof(MemberKind) || CustomAttributeSyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::SpecializeAttributeSpecList:
#line 103 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return LabeledSpecializeEntrySyntax::kindof(MemberKind) || GenericWhereClauseSyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ObjCSelector:
#line 105 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return ObjCSelectorPieceSyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::SwitchCaseList:
#line 103 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return SwitchCaseSyntax::kindof(MemberKind) || IfConfigDeclSyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::CatchClauseList:
#line 105 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return CatchClauseSyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::CaseItemList:
#line 105 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return CaseItemSyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ConditionElementList:
#line 105 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return ConditionElementSyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::GenericRequirementList:
#line 105 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return Syntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::GenericParameterList:
#line 105 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return GenericParameterSyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::CompositionTypeElementList:
#line 105 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return CompositionTypeElementSyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TupleTypeElementList:
#line 105 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return TupleTypeElementSyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::GenericArgumentList:
#line 105 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return GenericArgumentSyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TuplePatternElementList:
#line 105 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return TuplePatternElementSyntax::kindof(MemberKind);
#line 97 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AvailabilitySpecList:
#line 105 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return AvailabilityArgumentSyntax::kindof(MemberKind);
#line 109 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  default:
    llvm_unreachable("Not collection kind.");
  }
}

bool SyntaxFactory::canServeAsCollectionMemberRaw(SyntaxKind CollectionKind,
                                                  const RC<RawSyntax> &Member) {
  return canServeAsCollectionMemberRaw(CollectionKind, Member->getKind());
}

bool SyntaxFactory::
canServeAsCollectionMember(SyntaxKind CollectionKind, Syntax Member) {
  return canServeAsCollectionMemberRaw(CollectionKind, Member.getRaw());
}

RC<RawSyntax> SyntaxFactory::createRaw(SyntaxKind Kind,
                                       llvm::ArrayRef<RC<RawSyntax>> Elements,
                                       RC<SyntaxArena> Arena) {
  switch (Kind) {
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::Decl: {
#line 158 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return nullptr;
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::Expr: {
#line 158 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return nullptr;
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::Stmt: {
#line 158 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return nullptr;
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::Type: {
#line 158 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return nullptr;
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::Pattern: {
#line 158 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return nullptr;
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::UnknownDecl: {
#line 158 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return nullptr;
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::UnknownExpr: {
#line 158 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return nullptr;
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::UnknownStmt: {
#line 158 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return nullptr;
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::UnknownType: {
#line 158 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return nullptr;
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::UnknownPattern: {
#line 158 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    return nullptr;
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::CodeBlockItem: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[3];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Item
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Item
return [](const RC<RawSyntax> &Raw) {
 // check Decl
return DeclSyntax::kindof(Raw->getKind());}(Raw) || [](const RC<RawSyntax> &Raw) {
 // check Stmt
return StmtSyntax::kindof(Raw->getKind());}(Raw) || [](const RC<RawSyntax> &Raw) {
 // check Expr
return ExprSyntax::kindof(Raw->getKind());}(Raw) || [](const RC<RawSyntax> &Raw) {
 // check TokenList
return TokenListSyntax::kindof(Raw->getKind());}(Raw) || [](const RC<RawSyntax> &Raw) {
 // check NonEmptyTokenList
return NonEmptyTokenListSyntax::kindof(Raw->getKind());}(Raw);
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Semicolon
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Semicolon
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::semi;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] ErrorTokens
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ErrorTokens
return Syntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[2] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::CodeBlockItemList: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::CodeBlockItemList, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::CodeBlock: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[3];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] LeftBrace
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftBrace
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::l_brace;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Statements
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Statements
return CodeBlockItemListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] RightBrace
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightBrace
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::r_brace;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::InOutExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Ampersand
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Ampersand
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::amp_prefix;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Expression
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Expression
return ExprSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PoundColumnExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[1];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] PoundColumn
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check PoundColumn
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::pound_column;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::FunctionCallArgumentList: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::FunctionCallArgumentList, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TupleElementList: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::TupleElementList, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ArrayElementList: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::ArrayElementList, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::DictionaryElementList: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::DictionaryElementList, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::StringLiteralSegments: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::StringLiteralSegments, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TryExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[3];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] TryKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TryKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_try;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] QuestionOrExclamationMark
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check QuestionOrExclamationMark
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::question_postfix || TokKind == tok::exclaim_postfix;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] Expression
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Expression
return ExprSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::DeclNameArgument: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Name
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Name
return TokenSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Colon
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Colon
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::colon;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::DeclNameArgumentList: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::DeclNameArgumentList, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::DeclNameArguments: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[3];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] LeftParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::l_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Arguments
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Arguments
return DeclNameArgumentListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] RightParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::r_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::IdentifierExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Identifier
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Identifier
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier || TokKind == tok::kw_self || TokKind == tok::kw_Self || TokKind == tok::dollarident || TokKind == tok::oper_binary_spaced;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] DeclNameArguments
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check DeclNameArguments
return DeclNameArgumentsSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::SuperRefExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[1];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] SuperKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check SuperKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_super;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::NilLiteralExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[1];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] NilKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check NilKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_nil;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::DiscardAssignmentExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[1];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Wildcard
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Wildcard
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw__;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AssignmentExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[1];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] AssignToken
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check AssignToken
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::equal;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::SequenceExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[1];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Elements
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Elements
return ExprListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ExprList: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::ExprList, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PoundLineExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[1];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] PoundLine
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check PoundLine
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::pound_line;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PoundFileExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[1];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] PoundFile
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check PoundFile
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::pound_file;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PoundFunctionExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[1];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] PoundFunction
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check PoundFunction
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::pound_function;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PoundDsohandleExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[1];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] PoundDsohandle
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check PoundDsohandle
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::pound_dsohandle;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::SymbolicReferenceExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Identifier
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Identifier
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] GenericArgumentClause
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check GenericArgumentClause
return GenericArgumentClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PrefixOperatorExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] OperatorToken
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check OperatorToken
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::oper_prefix;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] PostfixExpression
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check PostfixExpression
return ExprSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::BinaryOperatorExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[1];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] OperatorToken
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check OperatorToken
return TokenSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ArrowExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] ThrowsToken
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ThrowsToken
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_throws;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] ArrowToken
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ArrowToken
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::arrow;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::FloatLiteralExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[1];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] FloatingDigits
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check FloatingDigits
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::floating_literal;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TupleExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[3];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] LeftParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::l_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] ElementList
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ElementList
return TupleElementListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] RightParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::r_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ArrayExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[3];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] LeftSquare
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftSquare
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::l_square;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Elements
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Elements
return ArrayElementListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] RightSquare
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightSquare
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::r_square;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::DictionaryExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[3];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] LeftSquare
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftSquare
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::l_square;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Content
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Content
return [](const RC<RawSyntax> &Raw) {
 // check Colon
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::colon;
}(Raw) || [](const RC<RawSyntax> &Raw) {
 // check Elements
return DictionaryElementListSyntax::kindof(Raw->getKind());}(Raw);
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] RightSquare
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightSquare
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::r_square;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::FunctionCallArgument: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[4];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Label
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Label
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Colon
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Colon
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::colon;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] Expression
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Expression
return ExprSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] TrailingComma
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TrailingComma
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::comma;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[3] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TupleElement: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[4];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Label
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Label
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Colon
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Colon
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::colon;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] Expression
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Expression
return ExprSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] TrailingComma
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TrailingComma
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::comma;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[3] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ArrayElement: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Expression
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Expression
return ExprSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] TrailingComma
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TrailingComma
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::comma;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::DictionaryElement: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[4];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] KeyExpression
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check KeyExpression
return ExprSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Colon
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Colon
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::colon;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] ValueExpression
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ValueExpression
return ExprSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] TrailingComma
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TrailingComma
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::comma;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[3] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::IntegerLiteralExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[1];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Digits
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Digits
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::integer_literal;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::BooleanLiteralExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[1];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] BooleanLiteral
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check BooleanLiteral
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_true || TokKind == tok::kw_false;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TernaryExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[5];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] ConditionExpression
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ConditionExpression
return ExprSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] QuestionMark
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check QuestionMark
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::question_infix;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] FirstChoice
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check FirstChoice
return ExprSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] ColonMark
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ColonMark
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::colon;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] SecondChoice
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check SecondChoice
return ExprSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::MemberAccessExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[4];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Base
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Base
return ExprSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Dot
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Dot
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::period || TokKind == tok::period_prefix;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] Name
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Name
return TokenSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] DeclNameArguments
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check DeclNameArguments
return DeclNameArgumentsSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[3] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::IsExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] IsTok
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check IsTok
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_is;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] TypeName
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TypeName
return TypeSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AsExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[3];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] AsTok
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check AsTok
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_as;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] QuestionOrExclamationMark
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check QuestionOrExclamationMark
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::question_postfix || TokKind == tok::exclaim_postfix;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] TypeName
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TypeName
return TypeSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TypeExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[1];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Type
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Type
return TypeSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ClosureCaptureItem: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[5];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Specifier
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Specifier
return TokenListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Name
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Name
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] AssignToken
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check AssignToken
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::equal;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] Expression
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Expression
return ExprSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] TrailingComma
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TrailingComma
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::comma;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[4] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ClosureCaptureItemList: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::ClosureCaptureItemList, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ClosureCaptureSignature: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[3];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] LeftSquare
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftSquare
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::l_square;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Items
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Items
return ClosureCaptureItemListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] RightSquare
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightSquare
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::r_square;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ClosureParam: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Name
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Name
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier || TokKind == tok::kw__;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] TrailingComma
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TrailingComma
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::comma;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ClosureParamList: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::ClosureParamList, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ClosureSignature: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[5];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Capture
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Capture
return ClosureCaptureSignatureSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Input
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Input
return [](const RC<RawSyntax> &Raw) {
 // check SimpleInput
return ClosureParamListSyntax::kindof(Raw->getKind());}(Raw) || [](const RC<RawSyntax> &Raw) {
 // check Input
return ParameterClauseSyntax::kindof(Raw->getKind());}(Raw);
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] ThrowsTok
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ThrowsTok
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_throws;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] Output
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Output
return ReturnClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] InTok
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check InTok
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_in;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ClosureExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[4];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] LeftBrace
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftBrace
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::l_brace;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Signature
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Signature
return ClosureSignatureSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] Statements
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Statements
return CodeBlockItemListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] RightBrace
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightBrace
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::r_brace;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::UnresolvedPatternExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[1];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Pattern
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Pattern
return PatternSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::FunctionCallExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[5];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] CalledExpression
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check CalledExpression
return ExprSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] LeftParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::l_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] ArgumentList
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ArgumentList
return FunctionCallArgumentListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] RightParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::r_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] TrailingClosure
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TrailingClosure
return ClosureExprSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[4] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::SubscriptExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[5];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] CalledExpression
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check CalledExpression
return ExprSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] LeftBracket
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftBracket
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::l_square;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] ArgumentList
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ArgumentList
return FunctionCallArgumentListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] RightBracket
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightBracket
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::r_square;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] TrailingClosure
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TrailingClosure
return ClosureExprSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[4] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::OptionalChainingExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Expression
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Expression
return ExprSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] QuestionMark
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check QuestionMark
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::question_postfix;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ForcedValueExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Expression
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Expression
return ExprSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] ExclamationMark
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ExclamationMark
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::exclaim_postfix;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PostfixUnaryExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Expression
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Expression
return ExprSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] OperatorToken
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check OperatorToken
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::oper_postfix;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::SpecializeExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Expression
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Expression
return ExprSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] GenericArgumentClause
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check GenericArgumentClause
return GenericArgumentClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::StringSegment: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[1];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Content
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Content
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::string_segment;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ExpressionSegment: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[5];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Backslash
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Backslash
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::backslash;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Delimiter
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Delimiter
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::raw_string_delimiter;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] LeftParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::l_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] Expressions
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Expressions
return FunctionCallArgumentListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] RightParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::string_interpolation_anchor;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::StringLiteralExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[5];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] OpenDelimiter
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check OpenDelimiter
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::raw_string_delimiter;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] OpenQuote
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check OpenQuote
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::string_quote || TokKind == tok::multiline_string_quote;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] Segments
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Segments
return StringLiteralSegmentsSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] CloseQuote
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check CloseQuote
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::string_quote || TokKind == tok::multiline_string_quote;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] CloseDelimiter
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check CloseDelimiter
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::raw_string_delimiter;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[4] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::KeyPathExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[3];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Backslash
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Backslash
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::backslash;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] RootExpr
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RootExpr
return [](const RC<RawSyntax> &Raw) {
 // check IdentifierExpr
return IdentifierExprSyntax::kindof(Raw->getKind());}(Raw) || [](const RC<RawSyntax> &Raw) {
 // check SpecializeExpr
return SpecializeExprSyntax::kindof(Raw->getKind());}(Raw);
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] Expression
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Expression
return ExprSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::KeyPathBaseExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[1];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Period
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Period
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::period;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ObjcNamePiece: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Name
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Name
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Dot
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Dot
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::period;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ObjcName: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::ObjcName, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ObjcKeyPathExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[4];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] KeyPath
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check KeyPath
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::pound_keyPath;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] LeftParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::l_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] Name
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Name
return ObjcNameSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] RightParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::r_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ObjcSelectorExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[6];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] PoundSelector
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check PoundSelector
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::pound_selector;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] LeftParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::l_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] Kind
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Kind
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::contextual_keyword;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] Colon
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Colon
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::colon;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] Name
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Name
return ExprSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[5] RightParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::r_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[5] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::EditorPlaceholderExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[1];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Identifier
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Identifier
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ObjectLiteralExpr: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[4];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Identifier
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Identifier
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::pound_colorLiteral || TokKind == tok::pound_fileLiteral || TokKind == tok::pound_imageLiteral;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] LeftParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::l_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] Arguments
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Arguments
return FunctionCallArgumentListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] RightParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::r_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TypeInitializerClause: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Equal
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Equal
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::equal;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Value
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Value
return TypeSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TypealiasDecl: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[7];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Attributes
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Attributes
return AttributeListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Modifiers
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Modifiers
return ModifierListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] TypealiasKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TypealiasKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_typealias;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] Identifier
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Identifier
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] GenericParameterClause
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check GenericParameterClause
return GenericParameterClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[4] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[5] Initializer
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Initializer
return TypeInitializerClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[5] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[5] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[6] GenericWhereClause
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check GenericWhereClause
return GenericWhereClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[6] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[6] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AssociatedtypeDecl: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[7];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Attributes
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Attributes
return AttributeListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Modifiers
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Modifiers
return ModifierListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] AssociatedtypeKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check AssociatedtypeKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_associatedtype;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] Identifier
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Identifier
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] InheritanceClause
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check InheritanceClause
return TypeInheritanceClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[4] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[5] Initializer
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Initializer
return TypeInitializerClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[5] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[5] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[6] GenericWhereClause
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check GenericWhereClause
return GenericWhereClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[6] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[6] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::FunctionParameterList: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::FunctionParameterList, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ParameterClause: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[3];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] LeftParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::l_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] ParameterList
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ParameterList
return FunctionParameterListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] RightParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::r_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ReturnClause: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Arrow
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Arrow
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::arrow;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] ReturnType
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ReturnType
return TypeSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::FunctionSignature: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[3];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Input
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Input
return ParameterClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] ThrowsOrRethrowsKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ThrowsOrRethrowsKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_throws || TokKind == tok::kw_rethrows;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] Output
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Output
return ReturnClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[2] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::IfConfigClause: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[3];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] PoundKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check PoundKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::pound_if || TokKind == tok::pound_elseif || TokKind == tok::pound_else;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Condition
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Condition
return ExprSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] Elements
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Elements
return [](const RC<RawSyntax> &Raw) {
 // check Statements
return CodeBlockItemListSyntax::kindof(Raw->getKind());}(Raw) || [](const RC<RawSyntax> &Raw) {
 // check SwitchCases
return SwitchCaseListSyntax::kindof(Raw->getKind());}(Raw) || [](const RC<RawSyntax> &Raw) {
 // check Decls
return MemberDeclListSyntax::kindof(Raw->getKind());}(Raw);
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::IfConfigClauseList: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::IfConfigClauseList, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::IfConfigDecl: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Clauses
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Clauses
return IfConfigClauseListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] PoundEndif
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check PoundEndif
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::pound_endif;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PoundErrorDecl: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[4];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] PoundError
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check PoundError
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::pound_error;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] LeftParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::l_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] Message
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Message
return StringLiteralExprSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] RightParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::r_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PoundWarningDecl: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[4];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] PoundWarning
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check PoundWarning
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::pound_warning;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] LeftParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::l_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] Message
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Message
return StringLiteralExprSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] RightParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::r_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PoundSourceLocation: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[4];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] PoundSourceLocation
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check PoundSourceLocation
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::pound_sourceLocation;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] LeftParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::l_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] Args
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Args
return PoundSourceLocationArgsSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] RightParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::r_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PoundSourceLocationArgs: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[7];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] FileArgLabel
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check FileArgLabel
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] FileArgColon
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check FileArgColon
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::colon;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] FileName
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check FileName
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::string_literal;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] Comma
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Comma
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::comma;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] LineArgLabel
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LineArgLabel
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[5] LineArgColon
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LineArgColon
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::colon;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[5] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[6] LineNumber
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LineNumber
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::integer_literal;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[6] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::DeclModifier: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[4];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Name
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Name
if (!Raw->isToken()) return false;
auto Text = Raw->getTokenText();
return Text == "class" || Text == "convenience" || Text == "dynamic" || Text == "final" || Text == "infix" || Text == "lazy" || Text == "optional" || Text == "override" || Text == "postfix" || Text == "prefix" || Text == "required" || Text == "static" || Text == "unowned" || Text == "weak" || Text == "private" || Text == "fileprivate" || Text == "internal" || Text == "public" || Text == "open" || Text == "mutating" || Text == "nonmutating" || Text == "indirect" || Text == "__consuming";
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] DetailLeftParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check DetailLeftParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::l_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] Detail
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Detail
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] DetailRightParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check DetailRightParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::r_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[3] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::InheritedType: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] TypeName
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TypeName
return TypeSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] TrailingComma
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TrailingComma
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::comma;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::InheritedTypeList: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::InheritedTypeList, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TypeInheritanceClause: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Colon
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Colon
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::colon;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] InheritedTypeCollection
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check InheritedTypeCollection
return InheritedTypeListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ClassDecl: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[8];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Attributes
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Attributes
return AttributeListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Modifiers
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Modifiers
return ModifierListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] ClassKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ClassKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_class;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] Identifier
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Identifier
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] GenericParameterClause
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check GenericParameterClause
return GenericParameterClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[4] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[5] InheritanceClause
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check InheritanceClause
return TypeInheritanceClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[5] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[5] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[6] GenericWhereClause
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check GenericWhereClause
return GenericWhereClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[6] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[6] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[7] Members
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Members
return MemberDeclBlockSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[7] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::StructDecl: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[8];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Attributes
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Attributes
return AttributeListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Modifiers
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Modifiers
return ModifierListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] StructKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check StructKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_struct;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] Identifier
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Identifier
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] GenericParameterClause
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check GenericParameterClause
return GenericParameterClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[4] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[5] InheritanceClause
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check InheritanceClause
return TypeInheritanceClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[5] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[5] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[6] GenericWhereClause
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check GenericWhereClause
return GenericWhereClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[6] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[6] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[7] Members
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Members
return MemberDeclBlockSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[7] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ProtocolDecl: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[7];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Attributes
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Attributes
return AttributeListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Modifiers
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Modifiers
return ModifierListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] ProtocolKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ProtocolKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_protocol;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] Identifier
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Identifier
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] InheritanceClause
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check InheritanceClause
return TypeInheritanceClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[4] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[5] GenericWhereClause
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check GenericWhereClause
return GenericWhereClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[5] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[5] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[6] Members
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Members
return MemberDeclBlockSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[6] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ExtensionDecl: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[7];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Attributes
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Attributes
return AttributeListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Modifiers
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Modifiers
return ModifierListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] ExtensionKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ExtensionKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_extension;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] ExtendedType
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ExtendedType
return TypeSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] InheritanceClause
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check InheritanceClause
return TypeInheritanceClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[4] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[5] GenericWhereClause
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check GenericWhereClause
return GenericWhereClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[5] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[5] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[6] Members
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Members
return MemberDeclBlockSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[6] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::MemberDeclBlock: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[3];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] LeftBrace
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftBrace
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::l_brace;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Members
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Members
return MemberDeclListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] RightBrace
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightBrace
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::r_brace;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::MemberDeclList: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::MemberDeclList, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::MemberDeclListItem: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Decl
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Decl
return DeclSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Semicolon
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Semicolon
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::semi;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::SourceFile: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Statements
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Statements
return CodeBlockItemListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] EOFToken
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check EOFToken
return TokenSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::InitializerClause: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Equal
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Equal
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::equal;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Value
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Value
return ExprSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::FunctionParameter: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[8];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Attributes
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Attributes
return AttributeListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] FirstName
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check FirstName
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier || TokKind == tok::kw__;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] SecondName
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check SecondName
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier || TokKind == tok::kw__;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] Colon
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Colon
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::colon;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] Type
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Type
return TypeSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[4] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[5] Ellipsis
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Ellipsis
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::ellipsis;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[5] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[5] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[6] DefaultArgument
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check DefaultArgument
return InitializerClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[6] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[6] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[7] TrailingComma
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TrailingComma
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::comma;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[7] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[7] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ModifierList: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::ModifierList, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::FunctionDecl: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[8];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Attributes
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Attributes
return AttributeListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Modifiers
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Modifiers
return ModifierListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] FuncKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check FuncKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_func;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] Identifier
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Identifier
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier || TokKind == tok::oper_binary_unspaced || TokKind == tok::oper_binary_spaced || TokKind == tok::oper_prefix || TokKind == tok::oper_postfix;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] GenericParameterClause
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check GenericParameterClause
return GenericParameterClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[4] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[5] Signature
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Signature
return FunctionSignatureSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[5] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[6] GenericWhereClause
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check GenericWhereClause
return GenericWhereClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[6] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[6] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[7] Body
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Body
return CodeBlockSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[7] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[7] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::InitializerDecl: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[9];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Attributes
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Attributes
return AttributeListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Modifiers
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Modifiers
return ModifierListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] InitKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check InitKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_init;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] OptionalMark
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check OptionalMark
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::question_postfix || TokKind == tok::question_infix || TokKind == tok::exclaim_postfix;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] GenericParameterClause
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check GenericParameterClause
return GenericParameterClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[4] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[5] Parameters
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Parameters
return ParameterClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[5] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[6] ThrowsOrRethrowsKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ThrowsOrRethrowsKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_throws || TokKind == tok::kw_rethrows;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[6] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[6] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[7] GenericWhereClause
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check GenericWhereClause
return GenericWhereClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[7] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[7] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[8] Body
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Body
return CodeBlockSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[8] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[8] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::DeinitializerDecl: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[4];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Attributes
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Attributes
return AttributeListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Modifiers
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Modifiers
return ModifierListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] DeinitKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check DeinitKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_deinit;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] Body
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Body
return CodeBlockSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::SubscriptDecl: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[8];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Attributes
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Attributes
return AttributeListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Modifiers
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Modifiers
return ModifierListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] SubscriptKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check SubscriptKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_subscript;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] GenericParameterClause
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check GenericParameterClause
return GenericParameterClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] Indices
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Indices
return ParameterClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[5] Result
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Result
return ReturnClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[5] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[6] GenericWhereClause
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check GenericWhereClause
return GenericWhereClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[6] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[6] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[7] Accessor
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Accessor
return [](const RC<RawSyntax> &Raw) {
 // check Accessors
return AccessorBlockSyntax::kindof(Raw->getKind());}(Raw) || [](const RC<RawSyntax> &Raw) {
 // check Getter
return CodeBlockSyntax::kindof(Raw->getKind());}(Raw);
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[7] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[7] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AccessLevelModifier: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[4];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Name
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Name
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] LeftParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::l_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] Modifier
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Modifier
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] RightParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::r_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[3] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AccessPathComponent: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Name
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Name
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] TrailingDot
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TrailingDot
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::period;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AccessPath: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::AccessPath, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ImportDecl: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[5];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Attributes
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Attributes
return AttributeListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Modifiers
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Modifiers
return ModifierListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] ImportTok
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ImportTok
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_import;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] ImportKind
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ImportKind
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_typealias || TokKind == tok::kw_struct || TokKind == tok::kw_class || TokKind == tok::kw_enum || TokKind == tok::kw_protocol || TokKind == tok::kw_var || TokKind == tok::kw_let || TokKind == tok::kw_func;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] Path
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Path
return AccessPathSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AccessorParameter: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[3];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] LeftParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::l_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Name
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Name
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] RightParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::r_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AccessorDecl: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[5];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Attributes
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Attributes
return AttributeListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Modifier
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Modifier
return DeclModifierSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] AccessorKind
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check AccessorKind
if (!Raw->isToken()) return false;
auto Text = Raw->getTokenText();
return Text == "get" || Text == "set" || Text == "didSet" || Text == "willSet" || Text == "unsafeAddress" || Text == "addressWithOwner" || Text == "addressWithNativeOwner" || Text == "unsafeMutableAddress" || Text == "mutableAddressWithOwner" || Text == "mutableAddressWithNativeOwner" || Text == "_read" || Text == "_modify";
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] Parameter
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Parameter
return AccessorParameterSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] Body
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Body
return CodeBlockSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[4] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AccessorList: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::AccessorList, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AccessorBlock: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[3];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] LeftBrace
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftBrace
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::l_brace;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Accessors
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Accessors
return AccessorListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] RightBrace
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightBrace
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::r_brace;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PatternBinding: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[5];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Pattern
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Pattern
return PatternSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] TypeAnnotation
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TypeAnnotation
return TypeAnnotationSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] Initializer
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Initializer
return InitializerClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] Accessor
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Accessor
return [](const RC<RawSyntax> &Raw) {
 // check Accessors
return AccessorBlockSyntax::kindof(Raw->getKind());}(Raw) || [](const RC<RawSyntax> &Raw) {
 // check Getter
return CodeBlockSyntax::kindof(Raw->getKind());}(Raw);
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] TrailingComma
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TrailingComma
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::comma;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[4] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PatternBindingList: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::PatternBindingList, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::VariableDecl: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[4];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Attributes
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Attributes
return AttributeListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Modifiers
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Modifiers
return ModifierListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] LetOrVarKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LetOrVarKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_let || TokKind == tok::kw_var;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] Bindings
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Bindings
return PatternBindingListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::EnumCaseElement: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[4];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Identifier
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Identifier
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] AssociatedValue
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check AssociatedValue
return ParameterClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] RawValue
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RawValue
return InitializerClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] TrailingComma
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TrailingComma
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::comma;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[3] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::EnumCaseElementList: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::EnumCaseElementList, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::EnumCaseDecl: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[4];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Attributes
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Attributes
return AttributeListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Modifiers
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Modifiers
return ModifierListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] CaseKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check CaseKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_case;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] Elements
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Elements
return EnumCaseElementListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::EnumDecl: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[8];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Attributes
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Attributes
return AttributeListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Modifiers
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Modifiers
return ModifierListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] EnumKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check EnumKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_enum;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] Identifier
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Identifier
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] GenericParameters
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check GenericParameters
return GenericParameterClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[4] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[5] InheritanceClause
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check InheritanceClause
return TypeInheritanceClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[5] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[5] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[6] GenericWhereClause
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check GenericWhereClause
return GenericWhereClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[6] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[6] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[7] Members
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Members
return MemberDeclBlockSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[7] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::OperatorDecl: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[5];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Attributes
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Attributes
return AttributeListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Modifiers
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Modifiers
return ModifierListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] OperatorKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check OperatorKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_operator;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] Identifier
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Identifier
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::oper_binary_unspaced || TokKind == tok::oper_binary_spaced || TokKind == tok::oper_prefix || TokKind == tok::oper_postfix;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] OperatorPrecedenceAndTypes
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check OperatorPrecedenceAndTypes
return OperatorPrecedenceAndTypesSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[4] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::IdentifierList: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::IdentifierList, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::OperatorPrecedenceAndTypes: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Colon
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Colon
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::colon;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] PrecedenceGroupAndDesignatedTypes
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check PrecedenceGroupAndDesignatedTypes
return IdentifierListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PrecedenceGroupDecl: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[7];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Attributes
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Attributes
return AttributeListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Modifiers
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Modifiers
return ModifierListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] PrecedencegroupKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check PrecedencegroupKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_precedencegroup;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] Identifier
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Identifier
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] LeftBrace
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftBrace
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::l_brace;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[5] GroupAttributes
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check GroupAttributes
return PrecedenceGroupAttributeListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[5] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[6] RightBrace
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightBrace
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::r_brace;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[6] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PrecedenceGroupAttributeList: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::PrecedenceGroupAttributeList, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PrecedenceGroupRelation: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[3];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] HigherThanOrLowerThan
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check HigherThanOrLowerThan
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Colon
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Colon
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::colon;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] OtherNames
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check OtherNames
return PrecedenceGroupNameListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PrecedenceGroupNameList: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::PrecedenceGroupNameList, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PrecedenceGroupNameElement: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Name
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Name
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] TrailingComma
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TrailingComma
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::comma;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PrecedenceGroupAssignment: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[3];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] AssignmentKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check AssignmentKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Colon
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Colon
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::colon;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] Flag
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Flag
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_true || TokKind == tok::kw_false;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PrecedenceGroupAssociativity: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[3];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] AssociativityKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check AssociativityKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Colon
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Colon
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::colon;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] Value
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Value
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TokenList: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::TokenList, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::NonEmptyTokenList: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::NonEmptyTokenList, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::CustomAttribute: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[5];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] AtSignToken
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check AtSignToken
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::at_sign;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] AttributeName
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check AttributeName
return TypeSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] LeftParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::l_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] ArgumentList
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ArgumentList
return FunctionCallArgumentListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] RightParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::r_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[4] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::Attribute: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[6];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] AtSignToken
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check AtSignToken
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::at_sign;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] AttributeName
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check AttributeName
return TokenSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] LeftParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::l_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] Argument
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Argument
return [](const RC<RawSyntax> &Raw) {
 // check Identifier
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Raw) || [](const RC<RawSyntax> &Raw) {
 // check String
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::string_literal;
}(Raw) || [](const RC<RawSyntax> &Raw) {
 // check Integer
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::integer_literal;
}(Raw) || [](const RC<RawSyntax> &Raw) {
 // check Availability
return AvailabilitySpecListSyntax::kindof(Raw->getKind());}(Raw) || [](const RC<RawSyntax> &Raw) {
 // check SpecializeArguments
return SpecializeAttributeSpecListSyntax::kindof(Raw->getKind());}(Raw) || [](const RC<RawSyntax> &Raw) {
 // check ObjCName
return ObjCSelectorSyntax::kindof(Raw->getKind());}(Raw) || [](const RC<RawSyntax> &Raw) {
 // check ImplementsArguments
return ImplementsAttributeArgumentsSyntax::kindof(Raw->getKind());}(Raw) || [](const RC<RawSyntax> &Raw) {
 // check NamedAttributeString
return NamedAttributeStringArgumentSyntax::kindof(Raw->getKind());}(Raw);
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] RightParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::r_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[4] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[5] TokenList
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TokenList
return TokenListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[5] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[5] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AttributeList: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::AttributeList, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::SpecializeAttributeSpecList: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::SpecializeAttributeSpecList, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::LabeledSpecializeEntry: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[4];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Label
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Label
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Colon
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Colon
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::colon;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] Value
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Value
return TokenSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] TrailingComma
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TrailingComma
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::comma;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[3] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::NamedAttributeStringArgument: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[3];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] NameTok
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check NameTok
return TokenSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Colon
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Colon
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::colon;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] StringOrDeclname
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check StringOrDeclname
return [](const RC<RawSyntax> &Raw) {
 // check String
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::string_literal;
}(Raw) || [](const RC<RawSyntax> &Raw) {
 // check Declname
return DeclNameSyntax::kindof(Raw->getKind());}(Raw);
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::DeclName: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] DeclBaseName
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check DeclBaseName
return [](const RC<RawSyntax> &Raw) {
 // check Identifier
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Raw) || [](const RC<RawSyntax> &Raw) {
 // check Operator
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::oper_prefix;
}(Raw);
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] DeclNameArguments
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check DeclNameArguments
return DeclNameArgumentsSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ImplementsAttributeArguments: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[4];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Type
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Type
return SimpleTypeIdentifierSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Comma
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Comma
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::comma;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] DeclBaseName
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check DeclBaseName
return [](const RC<RawSyntax> &Raw) {
 // check Identifier
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Raw) || [](const RC<RawSyntax> &Raw) {
 // check Operator
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::oper_prefix;
}(Raw);
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] DeclNameArguments
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check DeclNameArguments
return DeclNameArgumentsSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[3] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ObjCSelectorPiece: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Name
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Name
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Colon
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Colon
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::colon;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ObjCSelector: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::ObjCSelector, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ContinueStmt: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] ContinueKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ContinueKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_continue;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Label
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Label
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::WhileStmt: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[5];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] LabelName
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LabelName
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] LabelColon
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LabelColon
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::colon;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] WhileKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check WhileKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_while;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] Conditions
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Conditions
return ConditionElementListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] Body
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Body
return CodeBlockSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::DeferStmt: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] DeferKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check DeferKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_defer;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Body
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Body
return CodeBlockSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ExpressionStmt: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[1];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Expression
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Expression
return ExprSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::SwitchCaseList: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::SwitchCaseList, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::RepeatWhileStmt: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[6];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] LabelName
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LabelName
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] LabelColon
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LabelColon
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::colon;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] RepeatKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RepeatKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_repeat;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] Body
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Body
return CodeBlockSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] WhileKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check WhileKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_while;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[5] Condition
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Condition
return ExprSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[5] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::GuardStmt: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[4];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] GuardKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check GuardKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_guard;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Conditions
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Conditions
return ConditionElementListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] ElseKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ElseKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_else;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] Body
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Body
return CodeBlockSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::WhereClause: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] WhereKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check WhereKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_where;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] GuardResult
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check GuardResult
return ExprSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ForInStmt: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[10];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] LabelName
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LabelName
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] LabelColon
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LabelColon
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::colon;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] ForKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ForKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_for;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] CaseKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check CaseKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_case;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] Pattern
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Pattern
return PatternSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[5] TypeAnnotation
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TypeAnnotation
return TypeAnnotationSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[5] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[5] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[6] InKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check InKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_in;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[6] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[7] SequenceExpr
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check SequenceExpr
return ExprSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[7] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[8] WhereClause
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check WhereClause
return WhereClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[8] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[8] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[9] Body
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Body
return CodeBlockSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[9] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::SwitchStmt: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[7];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] LabelName
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LabelName
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] LabelColon
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LabelColon
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::colon;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] SwitchKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check SwitchKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_switch;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] Expression
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Expression
return ExprSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] LeftBrace
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftBrace
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::l_brace;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[5] Cases
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Cases
return SwitchCaseListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[5] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[6] RightBrace
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightBrace
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::r_brace;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[6] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::CatchClauseList: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::CatchClauseList, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::DoStmt: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[5];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] LabelName
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LabelName
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] LabelColon
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LabelColon
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::colon;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] DoKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check DoKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_do;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] Body
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Body
return CodeBlockSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] CatchClauses
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check CatchClauses
return CatchClauseListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[4] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ReturnStmt: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] ReturnKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ReturnKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_return;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Expression
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Expression
return ExprSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::YieldStmt: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] YieldKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check YieldKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_yield;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Yields
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Yields
return [](const RC<RawSyntax> &Raw) {
 // check YieldList
return YieldListSyntax::kindof(Raw->getKind());}(Raw) || [](const RC<RawSyntax> &Raw) {
 // check SimpleYield
return ExprSyntax::kindof(Raw->getKind());}(Raw);
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::YieldList: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[4];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] LeftParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::l_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] ElementList
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ElementList
return ExprListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] TrailingComma
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TrailingComma
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::comma;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] RightParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::r_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::FallthroughStmt: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[1];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] FallthroughKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check FallthroughKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_fallthrough;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::BreakStmt: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] BreakKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check BreakKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_break;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Label
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Label
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::CaseItemList: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::CaseItemList, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ConditionElement: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Condition
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Condition
return [](const RC<RawSyntax> &Raw) {
 // check Expression
return ExprSyntax::kindof(Raw->getKind());}(Raw) || [](const RC<RawSyntax> &Raw) {
 // check Availablity
return AvailabilityConditionSyntax::kindof(Raw->getKind());}(Raw) || [](const RC<RawSyntax> &Raw) {
 // check MatchingPattern
return MatchingPatternConditionSyntax::kindof(Raw->getKind());}(Raw) || [](const RC<RawSyntax> &Raw) {
 // check OptionalBinding
return OptionalBindingConditionSyntax::kindof(Raw->getKind());}(Raw);
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] TrailingComma
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TrailingComma
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::comma;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AvailabilityCondition: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[4];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] PoundAvailableKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check PoundAvailableKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::pound_available;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] LeftParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::l_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] AvailabilitySpec
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check AvailabilitySpec
return AvailabilitySpecListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] RightParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::r_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::MatchingPatternCondition: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[4];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] CaseKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check CaseKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_case;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Pattern
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Pattern
return PatternSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] TypeAnnotation
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TypeAnnotation
return TypeAnnotationSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] Initializer
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Initializer
return InitializerClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::OptionalBindingCondition: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[4];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] LetOrVarKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LetOrVarKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_let || TokKind == tok::kw_var;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Pattern
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Pattern
return PatternSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] TypeAnnotation
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TypeAnnotation
return TypeAnnotationSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] Initializer
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Initializer
return InitializerClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ConditionElementList: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::ConditionElementList, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::DeclarationStmt: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[1];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Declaration
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Declaration
return DeclSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ThrowStmt: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] ThrowKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ThrowKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_throw;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Expression
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Expression
return ExprSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::IfStmt: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[7];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] LabelName
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LabelName
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] LabelColon
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LabelColon
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::colon;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] IfKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check IfKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_if;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] Conditions
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Conditions
return ConditionElementListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] Body
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Body
return CodeBlockSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[5] ElseKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ElseKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_else;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[5] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[5] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[6] ElseBody
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ElseBody
return [](const RC<RawSyntax> &Raw) {
 // check IfStmt
return IfStmtSyntax::kindof(Raw->getKind());}(Raw) || [](const RC<RawSyntax> &Raw) {
 // check CodeBlock
return CodeBlockSyntax::kindof(Raw->getKind());}(Raw);
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[6] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[6] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ElseIfContinuation: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[1];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] IfStatement
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check IfStatement
return IfStmtSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ElseBlock: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] ElseKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ElseKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_else;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Body
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Body
return CodeBlockSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::SwitchCase: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[3];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] UnknownAttr
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check UnknownAttr
return AttributeSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Label
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Label
return [](const RC<RawSyntax> &Raw) {
 // check Default
return SwitchDefaultLabelSyntax::kindof(Raw->getKind());}(Raw) || [](const RC<RawSyntax> &Raw) {
 // check Case
return SwitchCaseLabelSyntax::kindof(Raw->getKind());}(Raw);
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] Statements
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Statements
return CodeBlockItemListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::SwitchDefaultLabel: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] DefaultKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check DefaultKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_default;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Colon
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Colon
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::colon;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::CaseItem: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[3];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Pattern
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Pattern
return PatternSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] WhereClause
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check WhereClause
return WhereClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] TrailingComma
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TrailingComma
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::comma;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[2] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::SwitchCaseLabel: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[3];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] CaseKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check CaseKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_case;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] CaseItems
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check CaseItems
return CaseItemListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] Colon
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Colon
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::colon;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::CatchClause: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[4];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] CatchKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check CatchKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_catch;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Pattern
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Pattern
return PatternSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] WhereClause
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check WhereClause
return WhereClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] Body
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Body
return CodeBlockSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::PoundAssertStmt: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[6];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] PoundAssert
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check PoundAssert
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::pound_assert;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] LeftParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::l_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] Condition
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Condition
return ExprSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] Comma
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Comma
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::comma;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] Message
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Message
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::string_literal;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[4] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[5] RightParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::r_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[5] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::GenericWhereClause: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] WhereKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check WhereKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_where;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] RequirementList
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RequirementList
return GenericRequirementListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::GenericRequirementList: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::GenericRequirementList, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::SameTypeRequirement: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[4];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] LeftTypeIdentifier
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftTypeIdentifier
return TypeSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] EqualityToken
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check EqualityToken
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::oper_binary_spaced || TokKind == tok::oper_binary_unspaced;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] RightTypeIdentifier
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightTypeIdentifier
return TypeSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] TrailingComma
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TrailingComma
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::comma;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[3] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::GenericParameterList: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::GenericParameterList, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::GenericParameter: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[5];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Attributes
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Attributes
return AttributeListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Name
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Name
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] Colon
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Colon
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::colon;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] InheritedType
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check InheritedType
return TypeSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] TrailingComma
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TrailingComma
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::comma;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[4] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::GenericParameterClause: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[3];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] LeftAngleBracket
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftAngleBracket
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::l_angle;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] GenericParameterList
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check GenericParameterList
return GenericParameterListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] RightAngleBracket
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightAngleBracket
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::r_angle;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ConformanceRequirement: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[4];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] LeftTypeIdentifier
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftTypeIdentifier
return TypeSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Colon
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Colon
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::colon;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] RightTypeIdentifier
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightTypeIdentifier
return TypeSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] TrailingComma
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TrailingComma
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::comma;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[3] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::SimpleTypeIdentifier: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Name
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Name
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier || TokKind == tok::kw_Self || TokKind == tok::kw_Any;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] GenericArgumentClause
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check GenericArgumentClause
return GenericArgumentClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::MemberTypeIdentifier: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[4];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] BaseType
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check BaseType
return TypeSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Period
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Period
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::period || TokKind == tok::period_prefix;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] Name
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Name
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier || TokKind == tok::kw_Self || TokKind == tok::kw_Any;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] GenericArgumentClause
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check GenericArgumentClause
return GenericArgumentClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[3] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ClassRestrictionType: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[1];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] ClassKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ClassKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_class;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ArrayType: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[3];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] LeftSquareBracket
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftSquareBracket
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::l_square;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] ElementType
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ElementType
return TypeSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] RightSquareBracket
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightSquareBracket
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::r_square;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::DictionaryType: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[5];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] LeftSquareBracket
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftSquareBracket
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::l_square;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] KeyType
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check KeyType
return TypeSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] Colon
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Colon
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::colon;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] ValueType
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ValueType
return TypeSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] RightSquareBracket
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightSquareBracket
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::r_square;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::MetatypeType: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[3];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] BaseType
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check BaseType
return TypeSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Period
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Period
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::period;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] TypeOrProtocol
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TypeOrProtocol
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::OptionalType: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] WrappedType
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check WrappedType
return TypeSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] QuestionMark
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check QuestionMark
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::question_postfix;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::SomeType: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] SomeSpecifier
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check SomeSpecifier
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] BaseType
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check BaseType
return TypeSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ImplicitlyUnwrappedOptionalType: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] WrappedType
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check WrappedType
return TypeSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] ExclamationMark
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ExclamationMark
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::exclaim_postfix;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::CompositionTypeElement: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Type
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Type
return TypeSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Ampersand
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Ampersand
if (!Raw->isToken()) return false;
auto Text = Raw->getTokenText();
return Text == "&";
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::CompositionTypeElementList: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::CompositionTypeElementList, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::CompositionType: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[1];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Elements
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Elements
return CompositionTypeElementListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TupleTypeElement: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[8];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] InOut
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check InOut
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_inout;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Name
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Name
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier || TokKind == tok::kw__;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] SecondName
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check SecondName
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier || TokKind == tok::kw__;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] Colon
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Colon
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::colon;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] Type
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Type
return TypeSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[5] Ellipsis
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Ellipsis
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::ellipsis;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[5] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[5] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[6] Initializer
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Initializer
return InitializerClauseSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[6] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[6] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[7] TrailingComma
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TrailingComma
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::comma;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[7] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[7] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TupleTypeElementList: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::TupleTypeElementList, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TupleType: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[3];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] LeftParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::l_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Elements
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Elements
return TupleTypeElementListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] RightParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::r_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::FunctionType: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[6];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] LeftParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::l_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Arguments
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Arguments
return TupleTypeElementListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] RightParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::r_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] ThrowsOrRethrowsKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ThrowsOrRethrowsKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_throws || TokKind == tok::kw_rethrows || TokKind == tok::kw_throw;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[3] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[4] Arrow
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Arrow
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::arrow;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[4] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[5] ReturnType
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ReturnType
return TypeSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[5] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AttributedType: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[3];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Specifier
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Specifier
if (!Raw->isToken()) return false;
auto Text = Raw->getTokenText();
return Text == "inout" || Text == "__shared" || Text == "__owned";
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Attributes
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Attributes
return AttributeListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] BaseType
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check BaseType
return TypeSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::GenericArgumentList: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::GenericArgumentList, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::GenericArgument: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] ArgumentType
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ArgumentType
return TypeSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] TrailingComma
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TrailingComma
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::comma;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::GenericArgumentClause: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[3];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] LeftAngleBracket
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftAngleBracket
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::l_angle;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Arguments
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Arguments
return GenericArgumentListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] RightAngleBracket
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightAngleBracket
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::r_angle;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TypeAnnotation: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Colon
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Colon
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::colon;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Type
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Type
return TypeSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::EnumCasePattern: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[4];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Type
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Type
return TypeSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Period
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Period
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::period;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] CaseName
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check CaseName
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] AssociatedTuple
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check AssociatedTuple
return TuplePatternSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[3] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::IsTypePattern: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] IsKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check IsKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_is;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Type
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Type
return TypeSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::OptionalPattern: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] SubPattern
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check SubPattern
return PatternSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] QuestionMark
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check QuestionMark
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::question_postfix;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::IdentifierPattern: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[1];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Identifier
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Identifier
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_self || TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AsTypePattern: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[3];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Pattern
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Pattern
return PatternSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] AsKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check AsKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_as;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] Type
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Type
return TypeSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TuplePattern: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[3];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] LeftParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LeftParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::l_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Elements
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Elements
return TuplePatternElementListSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] RightParen
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check RightParen
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::r_paren;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::WildcardPattern: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Wildcard
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Wildcard
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw__;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] TypeAnnotation
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TypeAnnotation
return TypeAnnotationSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TuplePatternElement: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[4];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] LabelName
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LabelName
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] LabelColon
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LabelColon
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::colon;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] Pattern
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Pattern
return PatternSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[3] TrailingComma
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TrailingComma
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::comma;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[3] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[3] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ExpressionPattern: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[1];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Expression
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Expression
return ExprSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::TuplePatternElementList: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::TuplePatternElementList, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::ValueBindingPattern: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] LetOrVarKeyword
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check LetOrVarKeyword
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::kw_let || TokKind == tok::kw_var;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] ValuePattern
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check ValuePattern
return PatternSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AvailabilitySpecList: {
#line 152 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    for (auto &E : Elements) {
      if (!canServeAsCollectionMemberRaw(SyntaxKind::AvailabilitySpecList, E))
        return nullptr;
    }
    return RawSyntax::make(Kind, Elements, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AvailabilityArgument: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Entry
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Entry
return [](const RC<RawSyntax> &Raw) {
 // check Star
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::oper_binary_spaced;
}(Raw) || [](const RC<RawSyntax> &Raw) {
 // check IdentifierRestriction
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Raw) || [](const RC<RawSyntax> &Raw) {
 // check AvailabilityVersionRestriction
return AvailabilityVersionRestrictionSyntax::kindof(Raw->getKind());}(Raw) || [](const RC<RawSyntax> &Raw) {
 // check AvailabilityLabeledArgument
return AvailabilityLabeledArgumentSyntax::kindof(Raw->getKind());}(Raw);
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] TrailingComma
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check TrailingComma
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::comma;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AvailabilityLabeledArgument: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[3];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Label
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Label
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Colon
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Colon
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::colon;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] Value
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Value
return [](const RC<RawSyntax> &Raw) {
 // check String
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::string_literal;
}(Raw) || [](const RC<RawSyntax> &Raw) {
 // check Version
return VersionTupleSyntax::kindof(Raw->getKind());}(Raw);
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::AvailabilityVersionRestriction: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[2];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] Platform
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Platform
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::identifier;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] Version
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check Version
return VersionTupleSyntax::kindof(Raw->getKind());}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 129 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  case SyntaxKind::VersionTuple: {
#line 132 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RC<RawSyntax> Layout[3];
    unsigned I = 0;
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[0] MajorMinor
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check MajorMinor
return [](const RC<RawSyntax> &Raw) {
 // check Major
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::integer_literal;
}(Raw) || [](const RC<RawSyntax> &Raw) {
 // check MajorMinor
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::floating_literal;
}(Raw);
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      return nullptr;
#line 142 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
#line 144 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[0] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[1] PatchPeriod
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check PatchPeriod
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::period;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[1] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[1] = Elements[I];
      ++I;
    }
#line 135 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    // child[2] PatchVersion
    if (I == Elements.size() ||
        ![](const RC<RawSyntax> &Raw) {
 // check PatchVersion
if (!Raw->isToken()) return false;
auto TokKind = Raw->getTokenKind();
return TokKind == tok::integer_literal;
}(Elements[I])) {
#line 138 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
      Layout[2] = nullptr;
#line 143 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    } else {
      Layout[2] = Elements[I];
      ++I;
    }
#line 148 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    if (I != Elements.size())
      return nullptr;
    return RawSyntax::make(Kind, Layout, SourcePresence::Present, Arena);
#line 160 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }
#line 162 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  default:
    return nullptr;
  }
}

Optional<Syntax> SyntaxFactory::createSyntax(SyntaxKind Kind,
                                             llvm::ArrayRef<Syntax> Elements,
                                             RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> Layout;
  Layout.reserve(Elements.size());
  for (auto &E : Elements)
    Layout.emplace_back(E.getRaw());

  if (auto Raw = createRaw(Kind, Layout, Arena))
    return make<Syntax>(Raw);
  else
    return None;
}

#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

DeclSyntax
SyntaxFactory::makeBlankDecl(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::Decl, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<DeclSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ExprSyntax
SyntaxFactory::makeBlankExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::Expr, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ExprSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

StmtSyntax
SyntaxFactory::makeBlankStmt(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::Stmt, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<StmtSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

TypeSyntax
SyntaxFactory::makeBlankType(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::Type, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<TypeSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

PatternSyntax
SyntaxFactory::makeBlankPattern(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::Pattern, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PatternSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

UnknownDeclSyntax
SyntaxFactory::makeBlankUnknownDecl(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::UnknownDecl, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<UnknownDeclSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

UnknownExprSyntax
SyntaxFactory::makeBlankUnknownExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::UnknownExpr, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<UnknownExprSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

UnknownStmtSyntax
SyntaxFactory::makeBlankUnknownStmt(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::UnknownStmt, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<UnknownStmtSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

UnknownTypeSyntax
SyntaxFactory::makeBlankUnknownType(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::UnknownType, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<UnknownTypeSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

UnknownPatternSyntax
SyntaxFactory::makeBlankUnknownPattern(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::UnknownPattern, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<UnknownPatternSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
CodeBlockItemSyntax
SyntaxFactory::makeCodeBlockItem(Syntax Item, llvm::Optional<TokenSyntax> Semicolon, llvm::Optional<Syntax> ErrorTokens,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::CodeBlockItem, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Item.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Semicolon.hasValue() ? Semicolon->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ErrorTokens.hasValue() ? ErrorTokens->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<CodeBlockItemSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

CodeBlockItemSyntax
SyntaxFactory::makeBlankCodeBlockItem(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::CodeBlockItem, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Decl),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<CodeBlockItemSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
CodeBlockItemListSyntax
SyntaxFactory::makeCodeBlockItemList(
    const std::vector<CodeBlockItemSyntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::CodeBlockItemList,
                             layout, SourcePresence::Present, Arena);
  return make<CodeBlockItemListSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

CodeBlockItemListSyntax
SyntaxFactory::makeBlankCodeBlockItemList(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::CodeBlockItemList, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<CodeBlockItemListSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
CodeBlockSyntax
SyntaxFactory::makeCodeBlock(TokenSyntax LeftBrace, CodeBlockItemListSyntax Statements, TokenSyntax RightBrace,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::CodeBlock, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftBrace.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Statements.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightBrace.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<CodeBlockSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

CodeBlockSyntax
SyntaxFactory::makeBlankCodeBlock(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::CodeBlock, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::l_brace, OwnedString::makeUnowned("{")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::CodeBlockItemList),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::r_brace, OwnedString::makeUnowned("}")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<CodeBlockSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
InOutExprSyntax
SyntaxFactory::makeInOutExpr(TokenSyntax Ampersand, ExprSyntax Expression,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::InOutExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Ampersand.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Expression.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<InOutExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

InOutExprSyntax
SyntaxFactory::makeBlankInOutExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::InOutExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::amp_prefix, OwnedString::makeUnowned("&")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Expr),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<InOutExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
PoundColumnExprSyntax
SyntaxFactory::makePoundColumnExpr(TokenSyntax PoundColumn,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::PoundColumnExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    PoundColumn.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PoundColumnExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

PoundColumnExprSyntax
SyntaxFactory::makeBlankPoundColumnExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::PoundColumnExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::pound_column, OwnedString::makeUnowned("#column")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PoundColumnExprSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
FunctionCallArgumentListSyntax
SyntaxFactory::makeFunctionCallArgumentList(
    const std::vector<FunctionCallArgumentSyntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::FunctionCallArgumentList,
                             layout, SourcePresence::Present, Arena);
  return make<FunctionCallArgumentListSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

FunctionCallArgumentListSyntax
SyntaxFactory::makeBlankFunctionCallArgumentList(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::FunctionCallArgumentList, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<FunctionCallArgumentListSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
TupleElementListSyntax
SyntaxFactory::makeTupleElementList(
    const std::vector<TupleElementSyntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::TupleElementList,
                             layout, SourcePresence::Present, Arena);
  return make<TupleElementListSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

TupleElementListSyntax
SyntaxFactory::makeBlankTupleElementList(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::TupleElementList, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<TupleElementListSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ArrayElementListSyntax
SyntaxFactory::makeArrayElementList(
    const std::vector<ArrayElementSyntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::ArrayElementList,
                             layout, SourcePresence::Present, Arena);
  return make<ArrayElementListSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ArrayElementListSyntax
SyntaxFactory::makeBlankArrayElementList(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ArrayElementList, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ArrayElementListSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
DictionaryElementListSyntax
SyntaxFactory::makeDictionaryElementList(
    const std::vector<DictionaryElementSyntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::DictionaryElementList,
                             layout, SourcePresence::Present, Arena);
  return make<DictionaryElementListSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

DictionaryElementListSyntax
SyntaxFactory::makeBlankDictionaryElementList(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::DictionaryElementList, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<DictionaryElementListSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
StringLiteralSegmentsSyntax
SyntaxFactory::makeStringLiteralSegments(
    const std::vector<Syntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::StringLiteralSegments,
                             layout, SourcePresence::Present, Arena);
  return make<StringLiteralSegmentsSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

StringLiteralSegmentsSyntax
SyntaxFactory::makeBlankStringLiteralSegments(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::StringLiteralSegments, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<StringLiteralSegmentsSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
TryExprSyntax
SyntaxFactory::makeTryExpr(TokenSyntax TryKeyword, llvm::Optional<TokenSyntax> QuestionOrExclamationMark, ExprSyntax Expression,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::TryExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TryKeyword.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    QuestionOrExclamationMark.hasValue() ? QuestionOrExclamationMark->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Expression.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<TryExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

TryExprSyntax
SyntaxFactory::makeBlankTryExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::TryExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_try, OwnedString::makeUnowned("try")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Expr),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<TryExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
DeclNameArgumentSyntax
SyntaxFactory::makeDeclNameArgument(TokenSyntax Name, TokenSyntax Colon,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::DeclNameArgument, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Name.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Colon.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<DeclNameArgumentSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

DeclNameArgumentSyntax
SyntaxFactory::makeBlankDeclNameArgument(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::DeclNameArgument, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::unknown, OwnedString::makeUnowned("")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::colon, OwnedString::makeUnowned(":")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<DeclNameArgumentSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
DeclNameArgumentListSyntax
SyntaxFactory::makeDeclNameArgumentList(
    const std::vector<DeclNameArgumentSyntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::DeclNameArgumentList,
                             layout, SourcePresence::Present, Arena);
  return make<DeclNameArgumentListSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

DeclNameArgumentListSyntax
SyntaxFactory::makeBlankDeclNameArgumentList(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::DeclNameArgumentList, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<DeclNameArgumentListSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
DeclNameArgumentsSyntax
SyntaxFactory::makeDeclNameArguments(TokenSyntax LeftParen, DeclNameArgumentListSyntax Arguments, TokenSyntax RightParen,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::DeclNameArguments, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftParen.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Arguments.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightParen.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<DeclNameArgumentsSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

DeclNameArgumentsSyntax
SyntaxFactory::makeBlankDeclNameArguments(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::DeclNameArguments, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::l_paren, OwnedString::makeUnowned("(")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::DeclNameArgumentList),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::r_paren, OwnedString::makeUnowned(")")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<DeclNameArgumentsSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
IdentifierExprSyntax
SyntaxFactory::makeIdentifierExpr(TokenSyntax Identifier, llvm::Optional<DeclNameArgumentsSyntax> DeclNameArguments,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::IdentifierExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Identifier.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    DeclNameArguments.hasValue() ? DeclNameArguments->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<IdentifierExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

IdentifierExprSyntax
SyntaxFactory::makeBlankIdentifierExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::IdentifierExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::identifier, OwnedString::makeUnowned("")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<IdentifierExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
SuperRefExprSyntax
SyntaxFactory::makeSuperRefExpr(TokenSyntax SuperKeyword,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::SuperRefExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    SuperKeyword.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<SuperRefExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

SuperRefExprSyntax
SyntaxFactory::makeBlankSuperRefExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::SuperRefExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_super, OwnedString::makeUnowned("super")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<SuperRefExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
NilLiteralExprSyntax
SyntaxFactory::makeNilLiteralExpr(TokenSyntax NilKeyword,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::NilLiteralExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    NilKeyword.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<NilLiteralExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

NilLiteralExprSyntax
SyntaxFactory::makeBlankNilLiteralExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::NilLiteralExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_nil, OwnedString::makeUnowned("nil")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<NilLiteralExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
DiscardAssignmentExprSyntax
SyntaxFactory::makeDiscardAssignmentExpr(TokenSyntax Wildcard,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::DiscardAssignmentExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Wildcard.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<DiscardAssignmentExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

DiscardAssignmentExprSyntax
SyntaxFactory::makeBlankDiscardAssignmentExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::DiscardAssignmentExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw__, OwnedString::makeUnowned("_")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<DiscardAssignmentExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
AssignmentExprSyntax
SyntaxFactory::makeAssignmentExpr(TokenSyntax AssignToken,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::AssignmentExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    AssignToken.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<AssignmentExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

AssignmentExprSyntax
SyntaxFactory::makeBlankAssignmentExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::AssignmentExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::equal, OwnedString::makeUnowned("=")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<AssignmentExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
SequenceExprSyntax
SyntaxFactory::makeSequenceExpr(ExprListSyntax Elements,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::SequenceExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Elements.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<SequenceExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

SequenceExprSyntax
SyntaxFactory::makeBlankSequenceExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::SequenceExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::ExprList),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<SequenceExprSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ExprListSyntax
SyntaxFactory::makeExprList(
    const std::vector<ExprSyntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::ExprList,
                             layout, SourcePresence::Present, Arena);
  return make<ExprListSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ExprListSyntax
SyntaxFactory::makeBlankExprList(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ExprList, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ExprListSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
PoundLineExprSyntax
SyntaxFactory::makePoundLineExpr(TokenSyntax PoundLine,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::PoundLineExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    PoundLine.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PoundLineExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

PoundLineExprSyntax
SyntaxFactory::makeBlankPoundLineExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::PoundLineExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::pound_line, OwnedString::makeUnowned("#line")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PoundLineExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
PoundFileExprSyntax
SyntaxFactory::makePoundFileExpr(TokenSyntax PoundFile,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::PoundFileExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    PoundFile.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PoundFileExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

PoundFileExprSyntax
SyntaxFactory::makeBlankPoundFileExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::PoundFileExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::pound_file, OwnedString::makeUnowned("#file")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PoundFileExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
PoundFunctionExprSyntax
SyntaxFactory::makePoundFunctionExpr(TokenSyntax PoundFunction,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::PoundFunctionExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    PoundFunction.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PoundFunctionExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

PoundFunctionExprSyntax
SyntaxFactory::makeBlankPoundFunctionExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::PoundFunctionExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::pound_function, OwnedString::makeUnowned("#function")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PoundFunctionExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
PoundDsohandleExprSyntax
SyntaxFactory::makePoundDsohandleExpr(TokenSyntax PoundDsohandle,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::PoundDsohandleExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    PoundDsohandle.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PoundDsohandleExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

PoundDsohandleExprSyntax
SyntaxFactory::makeBlankPoundDsohandleExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::PoundDsohandleExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::pound_dsohandle, OwnedString::makeUnowned("#dsohandle")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PoundDsohandleExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
SymbolicReferenceExprSyntax
SyntaxFactory::makeSymbolicReferenceExpr(TokenSyntax Identifier, llvm::Optional<GenericArgumentClauseSyntax> GenericArgumentClause,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::SymbolicReferenceExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Identifier.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    GenericArgumentClause.hasValue() ? GenericArgumentClause->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<SymbolicReferenceExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

SymbolicReferenceExprSyntax
SyntaxFactory::makeBlankSymbolicReferenceExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::SymbolicReferenceExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::identifier, OwnedString::makeUnowned("")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<SymbolicReferenceExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
PrefixOperatorExprSyntax
SyntaxFactory::makePrefixOperatorExpr(llvm::Optional<TokenSyntax> OperatorToken, ExprSyntax PostfixExpression,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::PrefixOperatorExpr, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    OperatorToken.hasValue() ? OperatorToken->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    PostfixExpression.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PrefixOperatorExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

PrefixOperatorExprSyntax
SyntaxFactory::makeBlankPrefixOperatorExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::PrefixOperatorExpr, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Expr),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PrefixOperatorExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
BinaryOperatorExprSyntax
SyntaxFactory::makeBinaryOperatorExpr(TokenSyntax OperatorToken,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::BinaryOperatorExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    OperatorToken.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<BinaryOperatorExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

BinaryOperatorExprSyntax
SyntaxFactory::makeBlankBinaryOperatorExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::BinaryOperatorExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::unknown, OwnedString::makeUnowned("")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<BinaryOperatorExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ArrowExprSyntax
SyntaxFactory::makeArrowExpr(llvm::Optional<TokenSyntax> ThrowsToken, TokenSyntax ArrowToken,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::ArrowExpr, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ThrowsToken.hasValue() ? ThrowsToken->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ArrowToken.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ArrowExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ArrowExprSyntax
SyntaxFactory::makeBlankArrowExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ArrowExpr, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::arrow, OwnedString::makeUnowned("->")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ArrowExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
FloatLiteralExprSyntax
SyntaxFactory::makeFloatLiteralExpr(TokenSyntax FloatingDigits,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::FloatLiteralExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    FloatingDigits.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<FloatLiteralExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

FloatLiteralExprSyntax
SyntaxFactory::makeBlankFloatLiteralExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::FloatLiteralExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::floating_literal, OwnedString::makeUnowned("")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<FloatLiteralExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
TupleExprSyntax
SyntaxFactory::makeTupleExpr(TokenSyntax LeftParen, TupleElementListSyntax ElementList, TokenSyntax RightParen,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::TupleExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftParen.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ElementList.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightParen.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<TupleExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

TupleExprSyntax
SyntaxFactory::makeBlankTupleExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::TupleExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::l_paren, OwnedString::makeUnowned("(")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::TupleElementList),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::r_paren, OwnedString::makeUnowned(")")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<TupleExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ArrayExprSyntax
SyntaxFactory::makeArrayExpr(TokenSyntax LeftSquare, ArrayElementListSyntax Elements, TokenSyntax RightSquare,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::ArrayExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftSquare.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Elements.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightSquare.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ArrayExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ArrayExprSyntax
SyntaxFactory::makeBlankArrayExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ArrayExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::l_square, OwnedString::makeUnowned("[")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::ArrayElementList),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::r_square, OwnedString::makeUnowned("]")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ArrayExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
DictionaryExprSyntax
SyntaxFactory::makeDictionaryExpr(TokenSyntax LeftSquare, Syntax Content, TokenSyntax RightSquare,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::DictionaryExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftSquare.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Content.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightSquare.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<DictionaryExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

DictionaryExprSyntax
SyntaxFactory::makeBlankDictionaryExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::DictionaryExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::l_square, OwnedString::makeUnowned("[")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::colon, OwnedString::makeUnowned(":")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::r_square, OwnedString::makeUnowned("]")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<DictionaryExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
FunctionCallArgumentSyntax
SyntaxFactory::makeFunctionCallArgument(llvm::Optional<TokenSyntax> Label, llvm::Optional<TokenSyntax> Colon, ExprSyntax Expression, llvm::Optional<TokenSyntax> TrailingComma,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::FunctionCallArgument, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Label.hasValue() ? Label->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Colon.hasValue() ? Colon->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Expression.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TrailingComma.hasValue() ? TrailingComma->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<FunctionCallArgumentSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

FunctionCallArgumentSyntax
SyntaxFactory::makeBlankFunctionCallArgument(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::FunctionCallArgument, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Expr),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<FunctionCallArgumentSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
TupleElementSyntax
SyntaxFactory::makeTupleElement(llvm::Optional<TokenSyntax> Label, llvm::Optional<TokenSyntax> Colon, ExprSyntax Expression, llvm::Optional<TokenSyntax> TrailingComma,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::TupleElement, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Label.hasValue() ? Label->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Colon.hasValue() ? Colon->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Expression.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TrailingComma.hasValue() ? TrailingComma->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<TupleElementSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

TupleElementSyntax
SyntaxFactory::makeBlankTupleElement(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::TupleElement, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Expr),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<TupleElementSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ArrayElementSyntax
SyntaxFactory::makeArrayElement(ExprSyntax Expression, llvm::Optional<TokenSyntax> TrailingComma,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::ArrayElement, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Expression.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TrailingComma.hasValue() ? TrailingComma->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ArrayElementSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ArrayElementSyntax
SyntaxFactory::makeBlankArrayElement(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ArrayElement, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Expr),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ArrayElementSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
DictionaryElementSyntax
SyntaxFactory::makeDictionaryElement(ExprSyntax KeyExpression, TokenSyntax Colon, ExprSyntax ValueExpression, llvm::Optional<TokenSyntax> TrailingComma,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::DictionaryElement, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    KeyExpression.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Colon.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ValueExpression.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TrailingComma.hasValue() ? TrailingComma->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<DictionaryElementSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

DictionaryElementSyntax
SyntaxFactory::makeBlankDictionaryElement(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::DictionaryElement, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Expr),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::colon, OwnedString::makeUnowned(":")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Expr),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<DictionaryElementSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
IntegerLiteralExprSyntax
SyntaxFactory::makeIntegerLiteralExpr(TokenSyntax Digits,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::IntegerLiteralExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Digits.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<IntegerLiteralExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

IntegerLiteralExprSyntax
SyntaxFactory::makeBlankIntegerLiteralExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::IntegerLiteralExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::integer_literal, OwnedString::makeUnowned("")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<IntegerLiteralExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
BooleanLiteralExprSyntax
SyntaxFactory::makeBooleanLiteralExpr(TokenSyntax BooleanLiteral,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::BooleanLiteralExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    BooleanLiteral.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<BooleanLiteralExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

BooleanLiteralExprSyntax
SyntaxFactory::makeBlankBooleanLiteralExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::BooleanLiteralExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_true, OwnedString::makeUnowned("true")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<BooleanLiteralExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
TernaryExprSyntax
SyntaxFactory::makeTernaryExpr(ExprSyntax ConditionExpression, TokenSyntax QuestionMark, ExprSyntax FirstChoice, TokenSyntax ColonMark, ExprSyntax SecondChoice,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::TernaryExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ConditionExpression.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    QuestionMark.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    FirstChoice.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ColonMark.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    SecondChoice.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<TernaryExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

TernaryExprSyntax
SyntaxFactory::makeBlankTernaryExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::TernaryExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Expr),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::question_infix, OwnedString::makeUnowned("?")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Expr),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::colon, OwnedString::makeUnowned(":")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Expr),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<TernaryExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
MemberAccessExprSyntax
SyntaxFactory::makeMemberAccessExpr(llvm::Optional<ExprSyntax> Base, TokenSyntax Dot, TokenSyntax Name, llvm::Optional<DeclNameArgumentsSyntax> DeclNameArguments,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::MemberAccessExpr, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Base.hasValue() ? Base->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Dot.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Name.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    DeclNameArguments.hasValue() ? DeclNameArguments->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<MemberAccessExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

MemberAccessExprSyntax
SyntaxFactory::makeBlankMemberAccessExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::MemberAccessExpr, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::period, OwnedString::makeUnowned(".")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::unknown, OwnedString::makeUnowned("")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<MemberAccessExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
IsExprSyntax
SyntaxFactory::makeIsExpr(TokenSyntax IsTok, TypeSyntax TypeName,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::IsExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    IsTok.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TypeName.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<IsExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

IsExprSyntax
SyntaxFactory::makeBlankIsExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::IsExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_is, OwnedString::makeUnowned("is")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Type),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<IsExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
AsExprSyntax
SyntaxFactory::makeAsExpr(TokenSyntax AsTok, llvm::Optional<TokenSyntax> QuestionOrExclamationMark, TypeSyntax TypeName,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::AsExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    AsTok.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    QuestionOrExclamationMark.hasValue() ? QuestionOrExclamationMark->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TypeName.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<AsExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

AsExprSyntax
SyntaxFactory::makeBlankAsExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::AsExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_as, OwnedString::makeUnowned("as")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Type),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<AsExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
TypeExprSyntax
SyntaxFactory::makeTypeExpr(TypeSyntax Type,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::TypeExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Type.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<TypeExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

TypeExprSyntax
SyntaxFactory::makeBlankTypeExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::TypeExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Type),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<TypeExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ClosureCaptureItemSyntax
SyntaxFactory::makeClosureCaptureItem(llvm::Optional<TokenListSyntax> Specifier, llvm::Optional<TokenSyntax> Name, llvm::Optional<TokenSyntax> AssignToken, ExprSyntax Expression, llvm::Optional<TokenSyntax> TrailingComma,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::ClosureCaptureItem, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Specifier.hasValue() ? Specifier->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Name.hasValue() ? Name->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    AssignToken.hasValue() ? AssignToken->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Expression.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TrailingComma.hasValue() ? TrailingComma->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ClosureCaptureItemSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ClosureCaptureItemSyntax
SyntaxFactory::makeBlankClosureCaptureItem(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ClosureCaptureItem, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Expr),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ClosureCaptureItemSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ClosureCaptureItemListSyntax
SyntaxFactory::makeClosureCaptureItemList(
    const std::vector<ClosureCaptureItemSyntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::ClosureCaptureItemList,
                             layout, SourcePresence::Present, Arena);
  return make<ClosureCaptureItemListSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ClosureCaptureItemListSyntax
SyntaxFactory::makeBlankClosureCaptureItemList(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ClosureCaptureItemList, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ClosureCaptureItemListSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ClosureCaptureSignatureSyntax
SyntaxFactory::makeClosureCaptureSignature(TokenSyntax LeftSquare, llvm::Optional<ClosureCaptureItemListSyntax> Items, TokenSyntax RightSquare,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::ClosureCaptureSignature, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftSquare.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Items.hasValue() ? Items->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightSquare.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ClosureCaptureSignatureSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ClosureCaptureSignatureSyntax
SyntaxFactory::makeBlankClosureCaptureSignature(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ClosureCaptureSignature, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::l_square, OwnedString::makeUnowned("[")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::r_square, OwnedString::makeUnowned("]")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ClosureCaptureSignatureSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ClosureParamSyntax
SyntaxFactory::makeClosureParam(TokenSyntax Name, llvm::Optional<TokenSyntax> TrailingComma,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::ClosureParam, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Name.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TrailingComma.hasValue() ? TrailingComma->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ClosureParamSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ClosureParamSyntax
SyntaxFactory::makeBlankClosureParam(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ClosureParam, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::identifier, OwnedString::makeUnowned("")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ClosureParamSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ClosureParamListSyntax
SyntaxFactory::makeClosureParamList(
    const std::vector<ClosureParamSyntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::ClosureParamList,
                             layout, SourcePresence::Present, Arena);
  return make<ClosureParamListSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ClosureParamListSyntax
SyntaxFactory::makeBlankClosureParamList(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ClosureParamList, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ClosureParamListSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ClosureSignatureSyntax
SyntaxFactory::makeClosureSignature(llvm::Optional<ClosureCaptureSignatureSyntax> Capture, llvm::Optional<Syntax> Input, llvm::Optional<TokenSyntax> ThrowsTok, llvm::Optional<ReturnClauseSyntax> Output, TokenSyntax InTok,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::ClosureSignature, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Capture.hasValue() ? Capture->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Input.hasValue() ? Input->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ThrowsTok.hasValue() ? ThrowsTok->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Output.hasValue() ? Output->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    InTok.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ClosureSignatureSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ClosureSignatureSyntax
SyntaxFactory::makeBlankClosureSignature(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ClosureSignature, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_in, OwnedString::makeUnowned("in")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ClosureSignatureSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ClosureExprSyntax
SyntaxFactory::makeClosureExpr(TokenSyntax LeftBrace, llvm::Optional<ClosureSignatureSyntax> Signature, CodeBlockItemListSyntax Statements, TokenSyntax RightBrace,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::ClosureExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftBrace.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Signature.hasValue() ? Signature->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Statements.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightBrace.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ClosureExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ClosureExprSyntax
SyntaxFactory::makeBlankClosureExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ClosureExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::l_brace, OwnedString::makeUnowned("{")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::CodeBlockItemList),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::r_brace, OwnedString::makeUnowned("}")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ClosureExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
UnresolvedPatternExprSyntax
SyntaxFactory::makeUnresolvedPatternExpr(PatternSyntax Pattern,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::UnresolvedPatternExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Pattern.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<UnresolvedPatternExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

UnresolvedPatternExprSyntax
SyntaxFactory::makeBlankUnresolvedPatternExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::UnresolvedPatternExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Pattern),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<UnresolvedPatternExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
FunctionCallExprSyntax
SyntaxFactory::makeFunctionCallExpr(ExprSyntax CalledExpression, llvm::Optional<TokenSyntax> LeftParen, FunctionCallArgumentListSyntax ArgumentList, llvm::Optional<TokenSyntax> RightParen, llvm::Optional<ClosureExprSyntax> TrailingClosure,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::FunctionCallExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    CalledExpression.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftParen.hasValue() ? LeftParen->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ArgumentList.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightParen.hasValue() ? RightParen->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TrailingClosure.hasValue() ? TrailingClosure->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<FunctionCallExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

FunctionCallExprSyntax
SyntaxFactory::makeBlankFunctionCallExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::FunctionCallExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Expr),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::FunctionCallArgumentList),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<FunctionCallExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
SubscriptExprSyntax
SyntaxFactory::makeSubscriptExpr(ExprSyntax CalledExpression, TokenSyntax LeftBracket, FunctionCallArgumentListSyntax ArgumentList, TokenSyntax RightBracket, llvm::Optional<ClosureExprSyntax> TrailingClosure,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::SubscriptExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    CalledExpression.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftBracket.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ArgumentList.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightBracket.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TrailingClosure.hasValue() ? TrailingClosure->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<SubscriptExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

SubscriptExprSyntax
SyntaxFactory::makeBlankSubscriptExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::SubscriptExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Expr),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::l_square, OwnedString::makeUnowned("[")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::FunctionCallArgumentList),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::r_square, OwnedString::makeUnowned("]")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<SubscriptExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
OptionalChainingExprSyntax
SyntaxFactory::makeOptionalChainingExpr(ExprSyntax Expression, TokenSyntax QuestionMark,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::OptionalChainingExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Expression.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    QuestionMark.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<OptionalChainingExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

OptionalChainingExprSyntax
SyntaxFactory::makeBlankOptionalChainingExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::OptionalChainingExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Expr),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::question_postfix, OwnedString::makeUnowned("?")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<OptionalChainingExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ForcedValueExprSyntax
SyntaxFactory::makeForcedValueExpr(ExprSyntax Expression, TokenSyntax ExclamationMark,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::ForcedValueExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Expression.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ExclamationMark.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ForcedValueExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ForcedValueExprSyntax
SyntaxFactory::makeBlankForcedValueExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ForcedValueExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Expr),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::exclaim_postfix, OwnedString::makeUnowned("!")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ForcedValueExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
PostfixUnaryExprSyntax
SyntaxFactory::makePostfixUnaryExpr(ExprSyntax Expression, TokenSyntax OperatorToken,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::PostfixUnaryExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Expression.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    OperatorToken.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PostfixUnaryExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

PostfixUnaryExprSyntax
SyntaxFactory::makeBlankPostfixUnaryExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::PostfixUnaryExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Expr),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::oper_postfix, OwnedString::makeUnowned("")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PostfixUnaryExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
SpecializeExprSyntax
SyntaxFactory::makeSpecializeExpr(ExprSyntax Expression, GenericArgumentClauseSyntax GenericArgumentClause,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::SpecializeExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Expression.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    GenericArgumentClause.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<SpecializeExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

SpecializeExprSyntax
SyntaxFactory::makeBlankSpecializeExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::SpecializeExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Expr),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::GenericArgumentClause),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<SpecializeExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
StringSegmentSyntax
SyntaxFactory::makeStringSegment(TokenSyntax Content,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::StringSegment, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Content.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<StringSegmentSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

StringSegmentSyntax
SyntaxFactory::makeBlankStringSegment(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::StringSegment, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::string_segment, OwnedString::makeUnowned("")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<StringSegmentSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ExpressionSegmentSyntax
SyntaxFactory::makeExpressionSegment(TokenSyntax Backslash, llvm::Optional<TokenSyntax> Delimiter, TokenSyntax LeftParen, FunctionCallArgumentListSyntax Expressions, TokenSyntax RightParen,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::ExpressionSegment, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Backslash.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Delimiter.hasValue() ? Delimiter->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftParen.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Expressions.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightParen.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ExpressionSegmentSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ExpressionSegmentSyntax
SyntaxFactory::makeBlankExpressionSegment(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ExpressionSegment, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::backslash, OwnedString::makeUnowned("\\")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::l_paren, OwnedString::makeUnowned("(")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::FunctionCallArgumentList),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::string_interpolation_anchor, OwnedString::makeUnowned(")")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ExpressionSegmentSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
StringLiteralExprSyntax
SyntaxFactory::makeStringLiteralExpr(llvm::Optional<TokenSyntax> OpenDelimiter, TokenSyntax OpenQuote, StringLiteralSegmentsSyntax Segments, TokenSyntax CloseQuote, llvm::Optional<TokenSyntax> CloseDelimiter,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::StringLiteralExpr, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    OpenDelimiter.hasValue() ? OpenDelimiter->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    OpenQuote.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Segments.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    CloseQuote.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    CloseDelimiter.hasValue() ? CloseDelimiter->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<StringLiteralExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

StringLiteralExprSyntax
SyntaxFactory::makeBlankStringLiteralExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::StringLiteralExpr, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::string_quote, OwnedString::makeUnowned("\"")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::StringLiteralSegments),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::string_quote, OwnedString::makeUnowned("\"")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<StringLiteralExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
KeyPathExprSyntax
SyntaxFactory::makeKeyPathExpr(TokenSyntax Backslash, llvm::Optional<ExprSyntax> RootExpr, ExprSyntax Expression,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::KeyPathExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Backslash.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RootExpr.hasValue() ? RootExpr->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Expression.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<KeyPathExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

KeyPathExprSyntax
SyntaxFactory::makeBlankKeyPathExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::KeyPathExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::backslash, OwnedString::makeUnowned("\\")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Expr),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<KeyPathExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
KeyPathBaseExprSyntax
SyntaxFactory::makeKeyPathBaseExpr(TokenSyntax Period,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::KeyPathBaseExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Period.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<KeyPathBaseExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

KeyPathBaseExprSyntax
SyntaxFactory::makeBlankKeyPathBaseExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::KeyPathBaseExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::period, OwnedString::makeUnowned(".")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<KeyPathBaseExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ObjcNamePieceSyntax
SyntaxFactory::makeObjcNamePiece(TokenSyntax Name, llvm::Optional<TokenSyntax> Dot,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::ObjcNamePiece, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Name.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Dot.hasValue() ? Dot->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ObjcNamePieceSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ObjcNamePieceSyntax
SyntaxFactory::makeBlankObjcNamePiece(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ObjcNamePiece, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::identifier, OwnedString::makeUnowned("")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ObjcNamePieceSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ObjcNameSyntax
SyntaxFactory::makeObjcName(
    const std::vector<ObjcNamePieceSyntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::ObjcName,
                             layout, SourcePresence::Present, Arena);
  return make<ObjcNameSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ObjcNameSyntax
SyntaxFactory::makeBlankObjcName(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ObjcName, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ObjcNameSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ObjcKeyPathExprSyntax
SyntaxFactory::makeObjcKeyPathExpr(TokenSyntax KeyPath, TokenSyntax LeftParen, ObjcNameSyntax Name, TokenSyntax RightParen,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::ObjcKeyPathExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    KeyPath.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftParen.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Name.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightParen.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ObjcKeyPathExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ObjcKeyPathExprSyntax
SyntaxFactory::makeBlankObjcKeyPathExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ObjcKeyPathExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::pound_keyPath, OwnedString::makeUnowned("#keyPath")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::l_paren, OwnedString::makeUnowned("(")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::ObjcName),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::r_paren, OwnedString::makeUnowned(")")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ObjcKeyPathExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ObjcSelectorExprSyntax
SyntaxFactory::makeObjcSelectorExpr(TokenSyntax PoundSelector, TokenSyntax LeftParen, llvm::Optional<TokenSyntax> Kind, llvm::Optional<TokenSyntax> Colon, ExprSyntax Name, TokenSyntax RightParen,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::ObjcSelectorExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    PoundSelector.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftParen.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Kind.hasValue() ? Kind->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Colon.hasValue() ? Colon->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Name.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightParen.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ObjcSelectorExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ObjcSelectorExprSyntax
SyntaxFactory::makeBlankObjcSelectorExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ObjcSelectorExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::pound_selector, OwnedString::makeUnowned("#selector")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::l_paren, OwnedString::makeUnowned("(")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Expr),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::r_paren, OwnedString::makeUnowned(")")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ObjcSelectorExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
EditorPlaceholderExprSyntax
SyntaxFactory::makeEditorPlaceholderExpr(TokenSyntax Identifier,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::EditorPlaceholderExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Identifier.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<EditorPlaceholderExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

EditorPlaceholderExprSyntax
SyntaxFactory::makeBlankEditorPlaceholderExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::EditorPlaceholderExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::identifier, OwnedString::makeUnowned("")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<EditorPlaceholderExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ObjectLiteralExprSyntax
SyntaxFactory::makeObjectLiteralExpr(TokenSyntax Identifier, TokenSyntax LeftParen, FunctionCallArgumentListSyntax Arguments, TokenSyntax RightParen,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::ObjectLiteralExpr, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Identifier.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftParen.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Arguments.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightParen.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ObjectLiteralExprSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ObjectLiteralExprSyntax
SyntaxFactory::makeBlankObjectLiteralExpr(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ObjectLiteralExpr, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::pound_colorLiteral, OwnedString::makeUnowned("#colorLiteral")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::l_paren, OwnedString::makeUnowned("(")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::FunctionCallArgumentList),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::r_paren, OwnedString::makeUnowned(")")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ObjectLiteralExprSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
TypeInitializerClauseSyntax
SyntaxFactory::makeTypeInitializerClause(TokenSyntax Equal, TypeSyntax Value,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::TypeInitializerClause, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Equal.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Value.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<TypeInitializerClauseSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

TypeInitializerClauseSyntax
SyntaxFactory::makeBlankTypeInitializerClause(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::TypeInitializerClause, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::equal, OwnedString::makeUnowned("=")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Type),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<TypeInitializerClauseSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
TypealiasDeclSyntax
SyntaxFactory::makeTypealiasDecl(llvm::Optional<AttributeListSyntax> Attributes, llvm::Optional<ModifierListSyntax> Modifiers, TokenSyntax TypealiasKeyword, TokenSyntax Identifier, llvm::Optional<GenericParameterClauseSyntax> GenericParameterClause, llvm::Optional<TypeInitializerClauseSyntax> Initializer, llvm::Optional<GenericWhereClauseSyntax> GenericWhereClause,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::TypealiasDecl, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Attributes.hasValue() ? Attributes->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Modifiers.hasValue() ? Modifiers->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TypealiasKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Identifier.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    GenericParameterClause.hasValue() ? GenericParameterClause->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Initializer.hasValue() ? Initializer->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    GenericWhereClause.hasValue() ? GenericWhereClause->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<TypealiasDeclSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

TypealiasDeclSyntax
SyntaxFactory::makeBlankTypealiasDecl(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::TypealiasDecl, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_typealias, OwnedString::makeUnowned("typealias")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::identifier, OwnedString::makeUnowned("")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<TypealiasDeclSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
AssociatedtypeDeclSyntax
SyntaxFactory::makeAssociatedtypeDecl(llvm::Optional<AttributeListSyntax> Attributes, llvm::Optional<ModifierListSyntax> Modifiers, TokenSyntax AssociatedtypeKeyword, TokenSyntax Identifier, llvm::Optional<TypeInheritanceClauseSyntax> InheritanceClause, llvm::Optional<TypeInitializerClauseSyntax> Initializer, llvm::Optional<GenericWhereClauseSyntax> GenericWhereClause,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::AssociatedtypeDecl, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Attributes.hasValue() ? Attributes->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Modifiers.hasValue() ? Modifiers->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    AssociatedtypeKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Identifier.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    InheritanceClause.hasValue() ? InheritanceClause->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Initializer.hasValue() ? Initializer->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    GenericWhereClause.hasValue() ? GenericWhereClause->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<AssociatedtypeDeclSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

AssociatedtypeDeclSyntax
SyntaxFactory::makeBlankAssociatedtypeDecl(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::AssociatedtypeDecl, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_associatedtype, OwnedString::makeUnowned("associatedtype")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::identifier, OwnedString::makeUnowned("")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<AssociatedtypeDeclSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
FunctionParameterListSyntax
SyntaxFactory::makeFunctionParameterList(
    const std::vector<FunctionParameterSyntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::FunctionParameterList,
                             layout, SourcePresence::Present, Arena);
  return make<FunctionParameterListSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

FunctionParameterListSyntax
SyntaxFactory::makeBlankFunctionParameterList(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::FunctionParameterList, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<FunctionParameterListSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ParameterClauseSyntax
SyntaxFactory::makeParameterClause(TokenSyntax LeftParen, FunctionParameterListSyntax ParameterList, TokenSyntax RightParen,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::ParameterClause, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftParen.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ParameterList.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightParen.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ParameterClauseSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ParameterClauseSyntax
SyntaxFactory::makeBlankParameterClause(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ParameterClause, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::l_paren, OwnedString::makeUnowned("(")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::FunctionParameterList),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::r_paren, OwnedString::makeUnowned(")")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ParameterClauseSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ReturnClauseSyntax
SyntaxFactory::makeReturnClause(TokenSyntax Arrow, TypeSyntax ReturnType,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::ReturnClause, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Arrow.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ReturnType.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ReturnClauseSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ReturnClauseSyntax
SyntaxFactory::makeBlankReturnClause(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ReturnClause, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::arrow, OwnedString::makeUnowned("->")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Type),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ReturnClauseSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
FunctionSignatureSyntax
SyntaxFactory::makeFunctionSignature(ParameterClauseSyntax Input, llvm::Optional<TokenSyntax> ThrowsOrRethrowsKeyword, llvm::Optional<ReturnClauseSyntax> Output,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::FunctionSignature, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Input.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ThrowsOrRethrowsKeyword.hasValue() ? ThrowsOrRethrowsKeyword->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Output.hasValue() ? Output->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<FunctionSignatureSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

FunctionSignatureSyntax
SyntaxFactory::makeBlankFunctionSignature(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::FunctionSignature, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::ParameterClause),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<FunctionSignatureSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
IfConfigClauseSyntax
SyntaxFactory::makeIfConfigClause(TokenSyntax PoundKeyword, llvm::Optional<ExprSyntax> Condition, Syntax Elements,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::IfConfigClause, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    PoundKeyword.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Condition.hasValue() ? Condition->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Elements.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<IfConfigClauseSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

IfConfigClauseSyntax
SyntaxFactory::makeBlankIfConfigClause(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::IfConfigClause, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::pound_if, OwnedString::makeUnowned("#if")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::CodeBlockItemList),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<IfConfigClauseSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
IfConfigClauseListSyntax
SyntaxFactory::makeIfConfigClauseList(
    const std::vector<IfConfigClauseSyntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::IfConfigClauseList,
                             layout, SourcePresence::Present, Arena);
  return make<IfConfigClauseListSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

IfConfigClauseListSyntax
SyntaxFactory::makeBlankIfConfigClauseList(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::IfConfigClauseList, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<IfConfigClauseListSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
IfConfigDeclSyntax
SyntaxFactory::makeIfConfigDecl(IfConfigClauseListSyntax Clauses, TokenSyntax PoundEndif,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::IfConfigDecl, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Clauses.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    PoundEndif.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<IfConfigDeclSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

IfConfigDeclSyntax
SyntaxFactory::makeBlankIfConfigDecl(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::IfConfigDecl, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::IfConfigClauseList),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::pound_endif, OwnedString::makeUnowned("#endif")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<IfConfigDeclSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
PoundErrorDeclSyntax
SyntaxFactory::makePoundErrorDecl(TokenSyntax PoundError, TokenSyntax LeftParen, StringLiteralExprSyntax Message, TokenSyntax RightParen,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::PoundErrorDecl, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    PoundError.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftParen.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Message.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightParen.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PoundErrorDeclSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

PoundErrorDeclSyntax
SyntaxFactory::makeBlankPoundErrorDecl(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::PoundErrorDecl, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::pound_error, OwnedString::makeUnowned("#error")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::l_paren, OwnedString::makeUnowned("(")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::StringLiteralExpr),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::r_paren, OwnedString::makeUnowned(")")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PoundErrorDeclSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
PoundWarningDeclSyntax
SyntaxFactory::makePoundWarningDecl(TokenSyntax PoundWarning, TokenSyntax LeftParen, StringLiteralExprSyntax Message, TokenSyntax RightParen,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::PoundWarningDecl, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    PoundWarning.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftParen.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Message.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightParen.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PoundWarningDeclSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

PoundWarningDeclSyntax
SyntaxFactory::makeBlankPoundWarningDecl(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::PoundWarningDecl, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::pound_warning, OwnedString::makeUnowned("#warning")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::l_paren, OwnedString::makeUnowned("(")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::StringLiteralExpr),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::r_paren, OwnedString::makeUnowned(")")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PoundWarningDeclSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
PoundSourceLocationSyntax
SyntaxFactory::makePoundSourceLocation(TokenSyntax PoundSourceLocation, TokenSyntax LeftParen, llvm::Optional<PoundSourceLocationArgsSyntax> Args, TokenSyntax RightParen,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::PoundSourceLocation, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    PoundSourceLocation.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftParen.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Args.hasValue() ? Args->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightParen.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PoundSourceLocationSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

PoundSourceLocationSyntax
SyntaxFactory::makeBlankPoundSourceLocation(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::PoundSourceLocation, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::pound_sourceLocation, OwnedString::makeUnowned("#sourceLocation")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::l_paren, OwnedString::makeUnowned("(")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::r_paren, OwnedString::makeUnowned(")")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PoundSourceLocationSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
PoundSourceLocationArgsSyntax
SyntaxFactory::makePoundSourceLocationArgs(TokenSyntax FileArgLabel, TokenSyntax FileArgColon, TokenSyntax FileName, TokenSyntax Comma, TokenSyntax LineArgLabel, TokenSyntax LineArgColon, TokenSyntax LineNumber,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::PoundSourceLocationArgs, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    FileArgLabel.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    FileArgColon.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    FileName.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Comma.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LineArgLabel.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LineArgColon.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LineNumber.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PoundSourceLocationArgsSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

PoundSourceLocationArgsSyntax
SyntaxFactory::makeBlankPoundSourceLocationArgs(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::PoundSourceLocationArgs, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::identifier, OwnedString::makeUnowned("")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::colon, OwnedString::makeUnowned(":")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::string_literal, OwnedString::makeUnowned("")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::comma, OwnedString::makeUnowned(",")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::identifier, OwnedString::makeUnowned("")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::colon, OwnedString::makeUnowned(":")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::integer_literal, OwnedString::makeUnowned("")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PoundSourceLocationArgsSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
DeclModifierSyntax
SyntaxFactory::makeDeclModifier(TokenSyntax Name, llvm::Optional<TokenSyntax> DetailLeftParen, llvm::Optional<TokenSyntax> Detail, llvm::Optional<TokenSyntax> DetailRightParen,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::DeclModifier, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Name.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    DetailLeftParen.hasValue() ? DetailLeftParen->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Detail.hasValue() ? Detail->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    DetailRightParen.hasValue() ? DetailRightParen->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<DeclModifierSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

DeclModifierSyntax
SyntaxFactory::makeBlankDeclModifier(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::DeclModifier, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::unknown, OwnedString::makeUnowned("")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<DeclModifierSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
InheritedTypeSyntax
SyntaxFactory::makeInheritedType(TypeSyntax TypeName, llvm::Optional<TokenSyntax> TrailingComma,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::InheritedType, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TypeName.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TrailingComma.hasValue() ? TrailingComma->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<InheritedTypeSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

InheritedTypeSyntax
SyntaxFactory::makeBlankInheritedType(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::InheritedType, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Type),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<InheritedTypeSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
InheritedTypeListSyntax
SyntaxFactory::makeInheritedTypeList(
    const std::vector<InheritedTypeSyntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::InheritedTypeList,
                             layout, SourcePresence::Present, Arena);
  return make<InheritedTypeListSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

InheritedTypeListSyntax
SyntaxFactory::makeBlankInheritedTypeList(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::InheritedTypeList, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<InheritedTypeListSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
TypeInheritanceClauseSyntax
SyntaxFactory::makeTypeInheritanceClause(TokenSyntax Colon, InheritedTypeListSyntax InheritedTypeCollection,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::TypeInheritanceClause, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Colon.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    InheritedTypeCollection.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<TypeInheritanceClauseSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

TypeInheritanceClauseSyntax
SyntaxFactory::makeBlankTypeInheritanceClause(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::TypeInheritanceClause, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::colon, OwnedString::makeUnowned(":")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::InheritedTypeList),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<TypeInheritanceClauseSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ClassDeclSyntax
SyntaxFactory::makeClassDecl(llvm::Optional<AttributeListSyntax> Attributes, llvm::Optional<ModifierListSyntax> Modifiers, TokenSyntax ClassKeyword, TokenSyntax Identifier, llvm::Optional<GenericParameterClauseSyntax> GenericParameterClause, llvm::Optional<TypeInheritanceClauseSyntax> InheritanceClause, llvm::Optional<GenericWhereClauseSyntax> GenericWhereClause, MemberDeclBlockSyntax Members,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::ClassDecl, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Attributes.hasValue() ? Attributes->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Modifiers.hasValue() ? Modifiers->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ClassKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Identifier.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    GenericParameterClause.hasValue() ? GenericParameterClause->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    InheritanceClause.hasValue() ? InheritanceClause->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    GenericWhereClause.hasValue() ? GenericWhereClause->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Members.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ClassDeclSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ClassDeclSyntax
SyntaxFactory::makeBlankClassDecl(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ClassDecl, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_class, OwnedString::makeUnowned("class")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::identifier, OwnedString::makeUnowned("")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::MemberDeclBlock),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ClassDeclSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
StructDeclSyntax
SyntaxFactory::makeStructDecl(llvm::Optional<AttributeListSyntax> Attributes, llvm::Optional<ModifierListSyntax> Modifiers, TokenSyntax StructKeyword, TokenSyntax Identifier, llvm::Optional<GenericParameterClauseSyntax> GenericParameterClause, llvm::Optional<TypeInheritanceClauseSyntax> InheritanceClause, llvm::Optional<GenericWhereClauseSyntax> GenericWhereClause, MemberDeclBlockSyntax Members,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::StructDecl, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Attributes.hasValue() ? Attributes->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Modifiers.hasValue() ? Modifiers->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    StructKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Identifier.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    GenericParameterClause.hasValue() ? GenericParameterClause->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    InheritanceClause.hasValue() ? InheritanceClause->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    GenericWhereClause.hasValue() ? GenericWhereClause->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Members.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<StructDeclSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

StructDeclSyntax
SyntaxFactory::makeBlankStructDecl(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::StructDecl, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_struct, OwnedString::makeUnowned("struct")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::identifier, OwnedString::makeUnowned("")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::MemberDeclBlock),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<StructDeclSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ProtocolDeclSyntax
SyntaxFactory::makeProtocolDecl(llvm::Optional<AttributeListSyntax> Attributes, llvm::Optional<ModifierListSyntax> Modifiers, TokenSyntax ProtocolKeyword, TokenSyntax Identifier, llvm::Optional<TypeInheritanceClauseSyntax> InheritanceClause, llvm::Optional<GenericWhereClauseSyntax> GenericWhereClause, MemberDeclBlockSyntax Members,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::ProtocolDecl, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Attributes.hasValue() ? Attributes->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Modifiers.hasValue() ? Modifiers->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ProtocolKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Identifier.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    InheritanceClause.hasValue() ? InheritanceClause->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    GenericWhereClause.hasValue() ? GenericWhereClause->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Members.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ProtocolDeclSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ProtocolDeclSyntax
SyntaxFactory::makeBlankProtocolDecl(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ProtocolDecl, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_protocol, OwnedString::makeUnowned("protocol")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::identifier, OwnedString::makeUnowned("")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::MemberDeclBlock),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ProtocolDeclSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ExtensionDeclSyntax
SyntaxFactory::makeExtensionDecl(llvm::Optional<AttributeListSyntax> Attributes, llvm::Optional<ModifierListSyntax> Modifiers, TokenSyntax ExtensionKeyword, TypeSyntax ExtendedType, llvm::Optional<TypeInheritanceClauseSyntax> InheritanceClause, llvm::Optional<GenericWhereClauseSyntax> GenericWhereClause, MemberDeclBlockSyntax Members,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::ExtensionDecl, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Attributes.hasValue() ? Attributes->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Modifiers.hasValue() ? Modifiers->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ExtensionKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ExtendedType.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    InheritanceClause.hasValue() ? InheritanceClause->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    GenericWhereClause.hasValue() ? GenericWhereClause->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Members.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ExtensionDeclSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ExtensionDeclSyntax
SyntaxFactory::makeBlankExtensionDecl(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ExtensionDecl, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_extension, OwnedString::makeUnowned("extension")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Type),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::MemberDeclBlock),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ExtensionDeclSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
MemberDeclBlockSyntax
SyntaxFactory::makeMemberDeclBlock(TokenSyntax LeftBrace, MemberDeclListSyntax Members, TokenSyntax RightBrace,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::MemberDeclBlock, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftBrace.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Members.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightBrace.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<MemberDeclBlockSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

MemberDeclBlockSyntax
SyntaxFactory::makeBlankMemberDeclBlock(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::MemberDeclBlock, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::l_brace, OwnedString::makeUnowned("{")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::MemberDeclList),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::r_brace, OwnedString::makeUnowned("}")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<MemberDeclBlockSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
MemberDeclListSyntax
SyntaxFactory::makeMemberDeclList(
    const std::vector<MemberDeclListItemSyntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::MemberDeclList,
                             layout, SourcePresence::Present, Arena);
  return make<MemberDeclListSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

MemberDeclListSyntax
SyntaxFactory::makeBlankMemberDeclList(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::MemberDeclList, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<MemberDeclListSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
MemberDeclListItemSyntax
SyntaxFactory::makeMemberDeclListItem(DeclSyntax Decl, llvm::Optional<TokenSyntax> Semicolon,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::MemberDeclListItem, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Decl.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Semicolon.hasValue() ? Semicolon->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<MemberDeclListItemSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

MemberDeclListItemSyntax
SyntaxFactory::makeBlankMemberDeclListItem(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::MemberDeclListItem, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Decl),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<MemberDeclListItemSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
SourceFileSyntax
SyntaxFactory::makeSourceFile(CodeBlockItemListSyntax Statements, TokenSyntax EOFToken,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::SourceFile, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Statements.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    EOFToken.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<SourceFileSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

SourceFileSyntax
SyntaxFactory::makeBlankSourceFile(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::SourceFile, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::CodeBlockItemList),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::unknown, OwnedString::makeUnowned("")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<SourceFileSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
InitializerClauseSyntax
SyntaxFactory::makeInitializerClause(TokenSyntax Equal, ExprSyntax Value,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::InitializerClause, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Equal.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Value.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<InitializerClauseSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

InitializerClauseSyntax
SyntaxFactory::makeBlankInitializerClause(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::InitializerClause, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::equal, OwnedString::makeUnowned("=")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Expr),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<InitializerClauseSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
FunctionParameterSyntax
SyntaxFactory::makeFunctionParameter(llvm::Optional<AttributeListSyntax> Attributes, llvm::Optional<TokenSyntax> FirstName, llvm::Optional<TokenSyntax> SecondName, llvm::Optional<TokenSyntax> Colon, llvm::Optional<TypeSyntax> Type, llvm::Optional<TokenSyntax> Ellipsis, llvm::Optional<InitializerClauseSyntax> DefaultArgument, llvm::Optional<TokenSyntax> TrailingComma,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::FunctionParameter, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Attributes.hasValue() ? Attributes->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    FirstName.hasValue() ? FirstName->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    SecondName.hasValue() ? SecondName->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Colon.hasValue() ? Colon->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Type.hasValue() ? Type->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Ellipsis.hasValue() ? Ellipsis->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    DefaultArgument.hasValue() ? DefaultArgument->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TrailingComma.hasValue() ? TrailingComma->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<FunctionParameterSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

FunctionParameterSyntax
SyntaxFactory::makeBlankFunctionParameter(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::FunctionParameter, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<FunctionParameterSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ModifierListSyntax
SyntaxFactory::makeModifierList(
    const std::vector<DeclModifierSyntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::ModifierList,
                             layout, SourcePresence::Present, Arena);
  return make<ModifierListSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ModifierListSyntax
SyntaxFactory::makeBlankModifierList(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ModifierList, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ModifierListSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
FunctionDeclSyntax
SyntaxFactory::makeFunctionDecl(llvm::Optional<AttributeListSyntax> Attributes, llvm::Optional<ModifierListSyntax> Modifiers, TokenSyntax FuncKeyword, TokenSyntax Identifier, llvm::Optional<GenericParameterClauseSyntax> GenericParameterClause, FunctionSignatureSyntax Signature, llvm::Optional<GenericWhereClauseSyntax> GenericWhereClause, llvm::Optional<CodeBlockSyntax> Body,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::FunctionDecl, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Attributes.hasValue() ? Attributes->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Modifiers.hasValue() ? Modifiers->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    FuncKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Identifier.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    GenericParameterClause.hasValue() ? GenericParameterClause->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Signature.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    GenericWhereClause.hasValue() ? GenericWhereClause->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Body.hasValue() ? Body->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<FunctionDeclSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

FunctionDeclSyntax
SyntaxFactory::makeBlankFunctionDecl(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::FunctionDecl, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_func, OwnedString::makeUnowned("func")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::identifier, OwnedString::makeUnowned("")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::FunctionSignature),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<FunctionDeclSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
InitializerDeclSyntax
SyntaxFactory::makeInitializerDecl(llvm::Optional<AttributeListSyntax> Attributes, llvm::Optional<ModifierListSyntax> Modifiers, TokenSyntax InitKeyword, llvm::Optional<TokenSyntax> OptionalMark, llvm::Optional<GenericParameterClauseSyntax> GenericParameterClause, ParameterClauseSyntax Parameters, llvm::Optional<TokenSyntax> ThrowsOrRethrowsKeyword, llvm::Optional<GenericWhereClauseSyntax> GenericWhereClause, llvm::Optional<CodeBlockSyntax> Body,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::InitializerDecl, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Attributes.hasValue() ? Attributes->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Modifiers.hasValue() ? Modifiers->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    InitKeyword.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    OptionalMark.hasValue() ? OptionalMark->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    GenericParameterClause.hasValue() ? GenericParameterClause->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Parameters.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ThrowsOrRethrowsKeyword.hasValue() ? ThrowsOrRethrowsKeyword->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    GenericWhereClause.hasValue() ? GenericWhereClause->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Body.hasValue() ? Body->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<InitializerDeclSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

InitializerDeclSyntax
SyntaxFactory::makeBlankInitializerDecl(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::InitializerDecl, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_init, OwnedString::makeUnowned("init")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::ParameterClause),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<InitializerDeclSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
DeinitializerDeclSyntax
SyntaxFactory::makeDeinitializerDecl(llvm::Optional<AttributeListSyntax> Attributes, llvm::Optional<ModifierListSyntax> Modifiers, TokenSyntax DeinitKeyword, CodeBlockSyntax Body,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::DeinitializerDecl, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Attributes.hasValue() ? Attributes->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Modifiers.hasValue() ? Modifiers->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    DeinitKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Body.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<DeinitializerDeclSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

DeinitializerDeclSyntax
SyntaxFactory::makeBlankDeinitializerDecl(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::DeinitializerDecl, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_deinit, OwnedString::makeUnowned("deinit")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::CodeBlock),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<DeinitializerDeclSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
SubscriptDeclSyntax
SyntaxFactory::makeSubscriptDecl(llvm::Optional<AttributeListSyntax> Attributes, llvm::Optional<ModifierListSyntax> Modifiers, TokenSyntax SubscriptKeyword, llvm::Optional<GenericParameterClauseSyntax> GenericParameterClause, ParameterClauseSyntax Indices, ReturnClauseSyntax Result, llvm::Optional<GenericWhereClauseSyntax> GenericWhereClause, llvm::Optional<Syntax> Accessor,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::SubscriptDecl, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Attributes.hasValue() ? Attributes->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Modifiers.hasValue() ? Modifiers->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    SubscriptKeyword.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    GenericParameterClause.hasValue() ? GenericParameterClause->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Indices.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Result.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    GenericWhereClause.hasValue() ? GenericWhereClause->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Accessor.hasValue() ? Accessor->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<SubscriptDeclSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

SubscriptDeclSyntax
SyntaxFactory::makeBlankSubscriptDecl(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::SubscriptDecl, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_subscript, OwnedString::makeUnowned("subscript")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::ParameterClause),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::ReturnClause),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<SubscriptDeclSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
AccessLevelModifierSyntax
SyntaxFactory::makeAccessLevelModifier(TokenSyntax Name, llvm::Optional<TokenSyntax> LeftParen, llvm::Optional<TokenSyntax> Modifier, llvm::Optional<TokenSyntax> RightParen,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::AccessLevelModifier, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Name.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftParen.hasValue() ? LeftParen->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Modifier.hasValue() ? Modifier->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightParen.hasValue() ? RightParen->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<AccessLevelModifierSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

AccessLevelModifierSyntax
SyntaxFactory::makeBlankAccessLevelModifier(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::AccessLevelModifier, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::identifier, OwnedString::makeUnowned("")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<AccessLevelModifierSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
AccessPathComponentSyntax
SyntaxFactory::makeAccessPathComponent(TokenSyntax Name, llvm::Optional<TokenSyntax> TrailingDot,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::AccessPathComponent, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Name.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TrailingDot.hasValue() ? TrailingDot->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<AccessPathComponentSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

AccessPathComponentSyntax
SyntaxFactory::makeBlankAccessPathComponent(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::AccessPathComponent, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::identifier, OwnedString::makeUnowned("")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<AccessPathComponentSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
AccessPathSyntax
SyntaxFactory::makeAccessPath(
    const std::vector<AccessPathComponentSyntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::AccessPath,
                             layout, SourcePresence::Present, Arena);
  return make<AccessPathSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

AccessPathSyntax
SyntaxFactory::makeBlankAccessPath(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::AccessPath, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<AccessPathSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ImportDeclSyntax
SyntaxFactory::makeImportDecl(llvm::Optional<AttributeListSyntax> Attributes, llvm::Optional<ModifierListSyntax> Modifiers, TokenSyntax ImportTok, llvm::Optional<TokenSyntax> ImportKind, AccessPathSyntax Path,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::ImportDecl, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Attributes.hasValue() ? Attributes->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Modifiers.hasValue() ? Modifiers->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ImportTok.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ImportKind.hasValue() ? ImportKind->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Path.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ImportDeclSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ImportDeclSyntax
SyntaxFactory::makeBlankImportDecl(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ImportDecl, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_import, OwnedString::makeUnowned("import")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::AccessPath),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ImportDeclSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
AccessorParameterSyntax
SyntaxFactory::makeAccessorParameter(TokenSyntax LeftParen, TokenSyntax Name, TokenSyntax RightParen,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::AccessorParameter, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftParen.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Name.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightParen.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<AccessorParameterSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

AccessorParameterSyntax
SyntaxFactory::makeBlankAccessorParameter(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::AccessorParameter, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::l_paren, OwnedString::makeUnowned("(")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::identifier, OwnedString::makeUnowned("")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::r_paren, OwnedString::makeUnowned(")")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<AccessorParameterSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
AccessorDeclSyntax
SyntaxFactory::makeAccessorDecl(llvm::Optional<AttributeListSyntax> Attributes, llvm::Optional<DeclModifierSyntax> Modifier, TokenSyntax AccessorKind, llvm::Optional<AccessorParameterSyntax> Parameter, llvm::Optional<CodeBlockSyntax> Body,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::AccessorDecl, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Attributes.hasValue() ? Attributes->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Modifier.hasValue() ? Modifier->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    AccessorKind.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Parameter.hasValue() ? Parameter->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Body.hasValue() ? Body->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<AccessorDeclSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

AccessorDeclSyntax
SyntaxFactory::makeBlankAccessorDecl(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::AccessorDecl, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::unknown, OwnedString::makeUnowned("")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<AccessorDeclSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
AccessorListSyntax
SyntaxFactory::makeAccessorList(
    const std::vector<AccessorDeclSyntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::AccessorList,
                             layout, SourcePresence::Present, Arena);
  return make<AccessorListSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

AccessorListSyntax
SyntaxFactory::makeBlankAccessorList(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::AccessorList, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<AccessorListSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
AccessorBlockSyntax
SyntaxFactory::makeAccessorBlock(TokenSyntax LeftBrace, AccessorListSyntax Accessors, TokenSyntax RightBrace,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::AccessorBlock, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftBrace.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Accessors.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightBrace.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<AccessorBlockSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

AccessorBlockSyntax
SyntaxFactory::makeBlankAccessorBlock(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::AccessorBlock, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::l_brace, OwnedString::makeUnowned("{")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::AccessorList),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::r_brace, OwnedString::makeUnowned("}")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<AccessorBlockSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
PatternBindingSyntax
SyntaxFactory::makePatternBinding(PatternSyntax Pattern, llvm::Optional<TypeAnnotationSyntax> TypeAnnotation, llvm::Optional<InitializerClauseSyntax> Initializer, llvm::Optional<Syntax> Accessor, llvm::Optional<TokenSyntax> TrailingComma,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::PatternBinding, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Pattern.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TypeAnnotation.hasValue() ? TypeAnnotation->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Initializer.hasValue() ? Initializer->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Accessor.hasValue() ? Accessor->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TrailingComma.hasValue() ? TrailingComma->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PatternBindingSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

PatternBindingSyntax
SyntaxFactory::makeBlankPatternBinding(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::PatternBinding, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Pattern),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PatternBindingSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
PatternBindingListSyntax
SyntaxFactory::makePatternBindingList(
    const std::vector<PatternBindingSyntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::PatternBindingList,
                             layout, SourcePresence::Present, Arena);
  return make<PatternBindingListSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

PatternBindingListSyntax
SyntaxFactory::makeBlankPatternBindingList(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::PatternBindingList, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PatternBindingListSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
VariableDeclSyntax
SyntaxFactory::makeVariableDecl(llvm::Optional<AttributeListSyntax> Attributes, llvm::Optional<ModifierListSyntax> Modifiers, TokenSyntax LetOrVarKeyword, PatternBindingListSyntax Bindings,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::VariableDecl, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Attributes.hasValue() ? Attributes->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Modifiers.hasValue() ? Modifiers->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LetOrVarKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Bindings.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<VariableDeclSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

VariableDeclSyntax
SyntaxFactory::makeBlankVariableDecl(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::VariableDecl, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_let, OwnedString::makeUnowned("let")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::PatternBindingList),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<VariableDeclSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
EnumCaseElementSyntax
SyntaxFactory::makeEnumCaseElement(TokenSyntax Identifier, llvm::Optional<ParameterClauseSyntax> AssociatedValue, llvm::Optional<InitializerClauseSyntax> RawValue, llvm::Optional<TokenSyntax> TrailingComma,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::EnumCaseElement, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Identifier.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    AssociatedValue.hasValue() ? AssociatedValue->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawValue.hasValue() ? RawValue->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TrailingComma.hasValue() ? TrailingComma->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<EnumCaseElementSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

EnumCaseElementSyntax
SyntaxFactory::makeBlankEnumCaseElement(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::EnumCaseElement, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::identifier, OwnedString::makeUnowned("")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<EnumCaseElementSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
EnumCaseElementListSyntax
SyntaxFactory::makeEnumCaseElementList(
    const std::vector<EnumCaseElementSyntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::EnumCaseElementList,
                             layout, SourcePresence::Present, Arena);
  return make<EnumCaseElementListSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

EnumCaseElementListSyntax
SyntaxFactory::makeBlankEnumCaseElementList(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::EnumCaseElementList, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<EnumCaseElementListSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
EnumCaseDeclSyntax
SyntaxFactory::makeEnumCaseDecl(llvm::Optional<AttributeListSyntax> Attributes, llvm::Optional<ModifierListSyntax> Modifiers, TokenSyntax CaseKeyword, EnumCaseElementListSyntax Elements,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::EnumCaseDecl, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Attributes.hasValue() ? Attributes->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Modifiers.hasValue() ? Modifiers->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    CaseKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Elements.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<EnumCaseDeclSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

EnumCaseDeclSyntax
SyntaxFactory::makeBlankEnumCaseDecl(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::EnumCaseDecl, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_case, OwnedString::makeUnowned("case")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::EnumCaseElementList),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<EnumCaseDeclSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
EnumDeclSyntax
SyntaxFactory::makeEnumDecl(llvm::Optional<AttributeListSyntax> Attributes, llvm::Optional<ModifierListSyntax> Modifiers, TokenSyntax EnumKeyword, TokenSyntax Identifier, llvm::Optional<GenericParameterClauseSyntax> GenericParameters, llvm::Optional<TypeInheritanceClauseSyntax> InheritanceClause, llvm::Optional<GenericWhereClauseSyntax> GenericWhereClause, MemberDeclBlockSyntax Members,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::EnumDecl, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Attributes.hasValue() ? Attributes->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Modifiers.hasValue() ? Modifiers->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    EnumKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Identifier.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    GenericParameters.hasValue() ? GenericParameters->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    InheritanceClause.hasValue() ? InheritanceClause->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    GenericWhereClause.hasValue() ? GenericWhereClause->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Members.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<EnumDeclSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

EnumDeclSyntax
SyntaxFactory::makeBlankEnumDecl(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::EnumDecl, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_enum, OwnedString::makeUnowned("enum")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::identifier, OwnedString::makeUnowned("")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::MemberDeclBlock),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<EnumDeclSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
OperatorDeclSyntax
SyntaxFactory::makeOperatorDecl(llvm::Optional<AttributeListSyntax> Attributes, llvm::Optional<ModifierListSyntax> Modifiers, TokenSyntax OperatorKeyword, TokenSyntax Identifier, llvm::Optional<OperatorPrecedenceAndTypesSyntax> OperatorPrecedenceAndTypes,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::OperatorDecl, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Attributes.hasValue() ? Attributes->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Modifiers.hasValue() ? Modifiers->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    OperatorKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Identifier.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    OperatorPrecedenceAndTypes.hasValue() ? OperatorPrecedenceAndTypes->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<OperatorDeclSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

OperatorDeclSyntax
SyntaxFactory::makeBlankOperatorDecl(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::OperatorDecl, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_operator, OwnedString::makeUnowned("operator")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::oper_binary_unspaced, OwnedString::makeUnowned("")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<OperatorDeclSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
IdentifierListSyntax
SyntaxFactory::makeIdentifierList(
    const std::vector<TokenSyntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::IdentifierList,
                             layout, SourcePresence::Present, Arena);
  return make<IdentifierListSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

IdentifierListSyntax
SyntaxFactory::makeBlankIdentifierList(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::IdentifierList, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<IdentifierListSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
OperatorPrecedenceAndTypesSyntax
SyntaxFactory::makeOperatorPrecedenceAndTypes(TokenSyntax Colon, IdentifierListSyntax PrecedenceGroupAndDesignatedTypes,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::OperatorPrecedenceAndTypes, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Colon.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    PrecedenceGroupAndDesignatedTypes.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<OperatorPrecedenceAndTypesSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

OperatorPrecedenceAndTypesSyntax
SyntaxFactory::makeBlankOperatorPrecedenceAndTypes(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::OperatorPrecedenceAndTypes, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::colon, OwnedString::makeUnowned(":")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::IdentifierList),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<OperatorPrecedenceAndTypesSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
PrecedenceGroupDeclSyntax
SyntaxFactory::makePrecedenceGroupDecl(llvm::Optional<AttributeListSyntax> Attributes, llvm::Optional<ModifierListSyntax> Modifiers, TokenSyntax PrecedencegroupKeyword, TokenSyntax Identifier, TokenSyntax LeftBrace, PrecedenceGroupAttributeListSyntax GroupAttributes, TokenSyntax RightBrace,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::PrecedenceGroupDecl, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Attributes.hasValue() ? Attributes->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Modifiers.hasValue() ? Modifiers->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    PrecedencegroupKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Identifier.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftBrace.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    GroupAttributes.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightBrace.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PrecedenceGroupDeclSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

PrecedenceGroupDeclSyntax
SyntaxFactory::makeBlankPrecedenceGroupDecl(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::PrecedenceGroupDecl, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_precedencegroup, OwnedString::makeUnowned("precedencegroup")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::identifier, OwnedString::makeUnowned("")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::l_brace, OwnedString::makeUnowned("{")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::PrecedenceGroupAttributeList),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::r_brace, OwnedString::makeUnowned("}")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PrecedenceGroupDeclSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
PrecedenceGroupAttributeListSyntax
SyntaxFactory::makePrecedenceGroupAttributeList(
    const std::vector<Syntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::PrecedenceGroupAttributeList,
                             layout, SourcePresence::Present, Arena);
  return make<PrecedenceGroupAttributeListSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

PrecedenceGroupAttributeListSyntax
SyntaxFactory::makeBlankPrecedenceGroupAttributeList(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::PrecedenceGroupAttributeList, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PrecedenceGroupAttributeListSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
PrecedenceGroupRelationSyntax
SyntaxFactory::makePrecedenceGroupRelation(TokenSyntax HigherThanOrLowerThan, TokenSyntax Colon, PrecedenceGroupNameListSyntax OtherNames,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::PrecedenceGroupRelation, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    HigherThanOrLowerThan.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Colon.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    OtherNames.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PrecedenceGroupRelationSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

PrecedenceGroupRelationSyntax
SyntaxFactory::makeBlankPrecedenceGroupRelation(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::PrecedenceGroupRelation, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::identifier, OwnedString::makeUnowned("")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::colon, OwnedString::makeUnowned(":")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::PrecedenceGroupNameList),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PrecedenceGroupRelationSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
PrecedenceGroupNameListSyntax
SyntaxFactory::makePrecedenceGroupNameList(
    const std::vector<PrecedenceGroupNameElementSyntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::PrecedenceGroupNameList,
                             layout, SourcePresence::Present, Arena);
  return make<PrecedenceGroupNameListSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

PrecedenceGroupNameListSyntax
SyntaxFactory::makeBlankPrecedenceGroupNameList(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::PrecedenceGroupNameList, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PrecedenceGroupNameListSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
PrecedenceGroupNameElementSyntax
SyntaxFactory::makePrecedenceGroupNameElement(TokenSyntax Name, llvm::Optional<TokenSyntax> TrailingComma,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::PrecedenceGroupNameElement, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Name.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TrailingComma.hasValue() ? TrailingComma->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PrecedenceGroupNameElementSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

PrecedenceGroupNameElementSyntax
SyntaxFactory::makeBlankPrecedenceGroupNameElement(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::PrecedenceGroupNameElement, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::identifier, OwnedString::makeUnowned("")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PrecedenceGroupNameElementSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
PrecedenceGroupAssignmentSyntax
SyntaxFactory::makePrecedenceGroupAssignment(TokenSyntax AssignmentKeyword, TokenSyntax Colon, TokenSyntax Flag,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::PrecedenceGroupAssignment, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    AssignmentKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Colon.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Flag.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PrecedenceGroupAssignmentSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

PrecedenceGroupAssignmentSyntax
SyntaxFactory::makeBlankPrecedenceGroupAssignment(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::PrecedenceGroupAssignment, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::identifier, OwnedString::makeUnowned("")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::colon, OwnedString::makeUnowned(":")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_true, OwnedString::makeUnowned("true")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PrecedenceGroupAssignmentSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
PrecedenceGroupAssociativitySyntax
SyntaxFactory::makePrecedenceGroupAssociativity(TokenSyntax AssociativityKeyword, TokenSyntax Colon, TokenSyntax Value,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::PrecedenceGroupAssociativity, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    AssociativityKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Colon.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Value.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PrecedenceGroupAssociativitySyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

PrecedenceGroupAssociativitySyntax
SyntaxFactory::makeBlankPrecedenceGroupAssociativity(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::PrecedenceGroupAssociativity, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::identifier, OwnedString::makeUnowned("")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::colon, OwnedString::makeUnowned(":")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::identifier, OwnedString::makeUnowned("")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PrecedenceGroupAssociativitySyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
TokenListSyntax
SyntaxFactory::makeTokenList(
    const std::vector<TokenSyntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::TokenList,
                             layout, SourcePresence::Present, Arena);
  return make<TokenListSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

TokenListSyntax
SyntaxFactory::makeBlankTokenList(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::TokenList, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<TokenListSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
NonEmptyTokenListSyntax
SyntaxFactory::makeNonEmptyTokenList(
    const std::vector<TokenSyntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::NonEmptyTokenList,
                             layout, SourcePresence::Present, Arena);
  return make<NonEmptyTokenListSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

NonEmptyTokenListSyntax
SyntaxFactory::makeBlankNonEmptyTokenList(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::NonEmptyTokenList, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<NonEmptyTokenListSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
CustomAttributeSyntax
SyntaxFactory::makeCustomAttribute(TokenSyntax AtSignToken, TypeSyntax AttributeName, llvm::Optional<TokenSyntax> LeftParen, llvm::Optional<FunctionCallArgumentListSyntax> ArgumentList, llvm::Optional<TokenSyntax> RightParen,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::CustomAttribute, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    AtSignToken.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    AttributeName.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftParen.hasValue() ? LeftParen->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ArgumentList.hasValue() ? ArgumentList->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightParen.hasValue() ? RightParen->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<CustomAttributeSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

CustomAttributeSyntax
SyntaxFactory::makeBlankCustomAttribute(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::CustomAttribute, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::at_sign, OwnedString::makeUnowned("@")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Type),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<CustomAttributeSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
AttributeSyntax
SyntaxFactory::makeAttribute(TokenSyntax AtSignToken, TokenSyntax AttributeName, llvm::Optional<TokenSyntax> LeftParen, llvm::Optional<Syntax> Argument, llvm::Optional<TokenSyntax> RightParen, llvm::Optional<TokenListSyntax> TokenList,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::Attribute, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    AtSignToken.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    AttributeName.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftParen.hasValue() ? LeftParen->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Argument.hasValue() ? Argument->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightParen.hasValue() ? RightParen->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TokenList.hasValue() ? TokenList->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<AttributeSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

AttributeSyntax
SyntaxFactory::makeBlankAttribute(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::Attribute, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::at_sign, OwnedString::makeUnowned("@")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::unknown, OwnedString::makeUnowned("")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<AttributeSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
AttributeListSyntax
SyntaxFactory::makeAttributeList(
    const std::vector<Syntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::AttributeList,
                             layout, SourcePresence::Present, Arena);
  return make<AttributeListSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

AttributeListSyntax
SyntaxFactory::makeBlankAttributeList(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::AttributeList, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<AttributeListSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
SpecializeAttributeSpecListSyntax
SyntaxFactory::makeSpecializeAttributeSpecList(
    const std::vector<Syntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::SpecializeAttributeSpecList,
                             layout, SourcePresence::Present, Arena);
  return make<SpecializeAttributeSpecListSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

SpecializeAttributeSpecListSyntax
SyntaxFactory::makeBlankSpecializeAttributeSpecList(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::SpecializeAttributeSpecList, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<SpecializeAttributeSpecListSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
LabeledSpecializeEntrySyntax
SyntaxFactory::makeLabeledSpecializeEntry(TokenSyntax Label, TokenSyntax Colon, TokenSyntax Value, llvm::Optional<TokenSyntax> TrailingComma,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::LabeledSpecializeEntry, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Label.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Colon.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Value.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TrailingComma.hasValue() ? TrailingComma->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<LabeledSpecializeEntrySyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

LabeledSpecializeEntrySyntax
SyntaxFactory::makeBlankLabeledSpecializeEntry(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::LabeledSpecializeEntry, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::identifier, OwnedString::makeUnowned("")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::colon, OwnedString::makeUnowned(":")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::unknown, OwnedString::makeUnowned("")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<LabeledSpecializeEntrySyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
NamedAttributeStringArgumentSyntax
SyntaxFactory::makeNamedAttributeStringArgument(TokenSyntax NameTok, TokenSyntax Colon, Syntax StringOrDeclname,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::NamedAttributeStringArgument, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    NameTok.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Colon.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    StringOrDeclname.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<NamedAttributeStringArgumentSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

NamedAttributeStringArgumentSyntax
SyntaxFactory::makeBlankNamedAttributeStringArgument(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::NamedAttributeStringArgument, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::unknown, OwnedString::makeUnowned("")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::colon, OwnedString::makeUnowned(":")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::string_literal, OwnedString::makeUnowned("")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<NamedAttributeStringArgumentSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
DeclNameSyntax
SyntaxFactory::makeDeclName(Syntax DeclBaseName, llvm::Optional<DeclNameArgumentsSyntax> DeclNameArguments,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::DeclName, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    DeclBaseName.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    DeclNameArguments.hasValue() ? DeclNameArguments->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<DeclNameSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

DeclNameSyntax
SyntaxFactory::makeBlankDeclName(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::DeclName, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::identifier, OwnedString::makeUnowned("")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<DeclNameSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ImplementsAttributeArgumentsSyntax
SyntaxFactory::makeImplementsAttributeArguments(SimpleTypeIdentifierSyntax Type, TokenSyntax Comma, Syntax DeclBaseName, llvm::Optional<DeclNameArgumentsSyntax> DeclNameArguments,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::ImplementsAttributeArguments, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Type.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Comma.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    DeclBaseName.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    DeclNameArguments.hasValue() ? DeclNameArguments->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ImplementsAttributeArgumentsSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ImplementsAttributeArgumentsSyntax
SyntaxFactory::makeBlankImplementsAttributeArguments(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ImplementsAttributeArguments, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::SimpleTypeIdentifier),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::comma, OwnedString::makeUnowned(",")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::identifier, OwnedString::makeUnowned("")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ImplementsAttributeArgumentsSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ObjCSelectorPieceSyntax
SyntaxFactory::makeObjCSelectorPiece(llvm::Optional<TokenSyntax> Name, llvm::Optional<TokenSyntax> Colon,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::ObjCSelectorPiece, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Name.hasValue() ? Name->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Colon.hasValue() ? Colon->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ObjCSelectorPieceSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ObjCSelectorPieceSyntax
SyntaxFactory::makeBlankObjCSelectorPiece(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ObjCSelectorPiece, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ObjCSelectorPieceSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ObjCSelectorSyntax
SyntaxFactory::makeObjCSelector(
    const std::vector<ObjCSelectorPieceSyntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::ObjCSelector,
                             layout, SourcePresence::Present, Arena);
  return make<ObjCSelectorSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ObjCSelectorSyntax
SyntaxFactory::makeBlankObjCSelector(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ObjCSelector, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ObjCSelectorSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ContinueStmtSyntax
SyntaxFactory::makeContinueStmt(TokenSyntax ContinueKeyword, llvm::Optional<TokenSyntax> Label,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::ContinueStmt, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ContinueKeyword.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Label.hasValue() ? Label->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ContinueStmtSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ContinueStmtSyntax
SyntaxFactory::makeBlankContinueStmt(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ContinueStmt, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_continue, OwnedString::makeUnowned("continue")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ContinueStmtSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
WhileStmtSyntax
SyntaxFactory::makeWhileStmt(llvm::Optional<TokenSyntax> LabelName, llvm::Optional<TokenSyntax> LabelColon, TokenSyntax WhileKeyword, ConditionElementListSyntax Conditions, CodeBlockSyntax Body,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::WhileStmt, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LabelName.hasValue() ? LabelName->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LabelColon.hasValue() ? LabelColon->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    WhileKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Conditions.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Body.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<WhileStmtSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

WhileStmtSyntax
SyntaxFactory::makeBlankWhileStmt(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::WhileStmt, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_while, OwnedString::makeUnowned("while")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::ConditionElementList),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::CodeBlock),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<WhileStmtSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
DeferStmtSyntax
SyntaxFactory::makeDeferStmt(TokenSyntax DeferKeyword, CodeBlockSyntax Body,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::DeferStmt, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    DeferKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Body.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<DeferStmtSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

DeferStmtSyntax
SyntaxFactory::makeBlankDeferStmt(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::DeferStmt, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_defer, OwnedString::makeUnowned("defer")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::CodeBlock),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<DeferStmtSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ExpressionStmtSyntax
SyntaxFactory::makeExpressionStmt(ExprSyntax Expression,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::ExpressionStmt, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Expression.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ExpressionStmtSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ExpressionStmtSyntax
SyntaxFactory::makeBlankExpressionStmt(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ExpressionStmt, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Expr),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ExpressionStmtSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
SwitchCaseListSyntax
SyntaxFactory::makeSwitchCaseList(
    const std::vector<Syntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::SwitchCaseList,
                             layout, SourcePresence::Present, Arena);
  return make<SwitchCaseListSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

SwitchCaseListSyntax
SyntaxFactory::makeBlankSwitchCaseList(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::SwitchCaseList, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<SwitchCaseListSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
RepeatWhileStmtSyntax
SyntaxFactory::makeRepeatWhileStmt(llvm::Optional<TokenSyntax> LabelName, llvm::Optional<TokenSyntax> LabelColon, TokenSyntax RepeatKeyword, CodeBlockSyntax Body, TokenSyntax WhileKeyword, ExprSyntax Condition,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::RepeatWhileStmt, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LabelName.hasValue() ? LabelName->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LabelColon.hasValue() ? LabelColon->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RepeatKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Body.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    WhileKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Condition.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<RepeatWhileStmtSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

RepeatWhileStmtSyntax
SyntaxFactory::makeBlankRepeatWhileStmt(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::RepeatWhileStmt, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_repeat, OwnedString::makeUnowned("repeat")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::CodeBlock),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_while, OwnedString::makeUnowned("while")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Expr),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<RepeatWhileStmtSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
GuardStmtSyntax
SyntaxFactory::makeGuardStmt(TokenSyntax GuardKeyword, ConditionElementListSyntax Conditions, TokenSyntax ElseKeyword, CodeBlockSyntax Body,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::GuardStmt, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    GuardKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Conditions.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ElseKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Body.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<GuardStmtSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

GuardStmtSyntax
SyntaxFactory::makeBlankGuardStmt(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::GuardStmt, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_guard, OwnedString::makeUnowned("guard")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::ConditionElementList),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_else, OwnedString::makeUnowned("else")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::CodeBlock),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<GuardStmtSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
WhereClauseSyntax
SyntaxFactory::makeWhereClause(TokenSyntax WhereKeyword, ExprSyntax GuardResult,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::WhereClause, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    WhereKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    GuardResult.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<WhereClauseSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

WhereClauseSyntax
SyntaxFactory::makeBlankWhereClause(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::WhereClause, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_where, OwnedString::makeUnowned("where")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Expr),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<WhereClauseSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ForInStmtSyntax
SyntaxFactory::makeForInStmt(llvm::Optional<TokenSyntax> LabelName, llvm::Optional<TokenSyntax> LabelColon, TokenSyntax ForKeyword, llvm::Optional<TokenSyntax> CaseKeyword, PatternSyntax Pattern, llvm::Optional<TypeAnnotationSyntax> TypeAnnotation, TokenSyntax InKeyword, ExprSyntax SequenceExpr, llvm::Optional<WhereClauseSyntax> WhereClause, CodeBlockSyntax Body,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::ForInStmt, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LabelName.hasValue() ? LabelName->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LabelColon.hasValue() ? LabelColon->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ForKeyword.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    CaseKeyword.hasValue() ? CaseKeyword->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Pattern.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TypeAnnotation.hasValue() ? TypeAnnotation->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    InKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    SequenceExpr.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    WhereClause.hasValue() ? WhereClause->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Body.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ForInStmtSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ForInStmtSyntax
SyntaxFactory::makeBlankForInStmt(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ForInStmt, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_for, OwnedString::makeUnowned("for")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Pattern),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_in, OwnedString::makeUnowned("in")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Expr),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::CodeBlock),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ForInStmtSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
SwitchStmtSyntax
SyntaxFactory::makeSwitchStmt(llvm::Optional<TokenSyntax> LabelName, llvm::Optional<TokenSyntax> LabelColon, TokenSyntax SwitchKeyword, ExprSyntax Expression, TokenSyntax LeftBrace, SwitchCaseListSyntax Cases, TokenSyntax RightBrace,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::SwitchStmt, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LabelName.hasValue() ? LabelName->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LabelColon.hasValue() ? LabelColon->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    SwitchKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Expression.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftBrace.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Cases.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightBrace.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<SwitchStmtSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

SwitchStmtSyntax
SyntaxFactory::makeBlankSwitchStmt(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::SwitchStmt, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_switch, OwnedString::makeUnowned("switch")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Expr),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::l_brace, OwnedString::makeUnowned("{")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::SwitchCaseList),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::r_brace, OwnedString::makeUnowned("}")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<SwitchStmtSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
CatchClauseListSyntax
SyntaxFactory::makeCatchClauseList(
    const std::vector<CatchClauseSyntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::CatchClauseList,
                             layout, SourcePresence::Present, Arena);
  return make<CatchClauseListSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

CatchClauseListSyntax
SyntaxFactory::makeBlankCatchClauseList(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::CatchClauseList, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<CatchClauseListSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
DoStmtSyntax
SyntaxFactory::makeDoStmt(llvm::Optional<TokenSyntax> LabelName, llvm::Optional<TokenSyntax> LabelColon, TokenSyntax DoKeyword, CodeBlockSyntax Body, llvm::Optional<CatchClauseListSyntax> CatchClauses,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::DoStmt, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LabelName.hasValue() ? LabelName->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LabelColon.hasValue() ? LabelColon->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    DoKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Body.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    CatchClauses.hasValue() ? CatchClauses->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<DoStmtSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

DoStmtSyntax
SyntaxFactory::makeBlankDoStmt(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::DoStmt, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_do, OwnedString::makeUnowned("do")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::CodeBlock),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<DoStmtSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ReturnStmtSyntax
SyntaxFactory::makeReturnStmt(TokenSyntax ReturnKeyword, llvm::Optional<ExprSyntax> Expression,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::ReturnStmt, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ReturnKeyword.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Expression.hasValue() ? Expression->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ReturnStmtSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ReturnStmtSyntax
SyntaxFactory::makeBlankReturnStmt(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ReturnStmt, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_return, OwnedString::makeUnowned("return")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ReturnStmtSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
YieldStmtSyntax
SyntaxFactory::makeYieldStmt(TokenSyntax YieldKeyword, Syntax Yields,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::YieldStmt, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    YieldKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Yields.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<YieldStmtSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

YieldStmtSyntax
SyntaxFactory::makeBlankYieldStmt(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::YieldStmt, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_yield, OwnedString::makeUnowned("yield")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::YieldList),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<YieldStmtSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
YieldListSyntax
SyntaxFactory::makeYieldList(TokenSyntax LeftParen, ExprListSyntax ElementList, llvm::Optional<TokenSyntax> TrailingComma, TokenSyntax RightParen,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::YieldList, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftParen.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ElementList.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TrailingComma.hasValue() ? TrailingComma->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightParen.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<YieldListSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

YieldListSyntax
SyntaxFactory::makeBlankYieldList(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::YieldList, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::l_paren, OwnedString::makeUnowned("(")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::ExprList),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::r_paren, OwnedString::makeUnowned(")")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<YieldListSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
FallthroughStmtSyntax
SyntaxFactory::makeFallthroughStmt(TokenSyntax FallthroughKeyword,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::FallthroughStmt, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    FallthroughKeyword.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<FallthroughStmtSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

FallthroughStmtSyntax
SyntaxFactory::makeBlankFallthroughStmt(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::FallthroughStmt, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_fallthrough, OwnedString::makeUnowned("fallthrough")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<FallthroughStmtSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
BreakStmtSyntax
SyntaxFactory::makeBreakStmt(TokenSyntax BreakKeyword, llvm::Optional<TokenSyntax> Label,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::BreakStmt, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    BreakKeyword.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Label.hasValue() ? Label->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<BreakStmtSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

BreakStmtSyntax
SyntaxFactory::makeBlankBreakStmt(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::BreakStmt, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_break, OwnedString::makeUnowned("break")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<BreakStmtSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
CaseItemListSyntax
SyntaxFactory::makeCaseItemList(
    const std::vector<CaseItemSyntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::CaseItemList,
                             layout, SourcePresence::Present, Arena);
  return make<CaseItemListSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

CaseItemListSyntax
SyntaxFactory::makeBlankCaseItemList(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::CaseItemList, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<CaseItemListSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ConditionElementSyntax
SyntaxFactory::makeConditionElement(Syntax Condition, llvm::Optional<TokenSyntax> TrailingComma,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::ConditionElement, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Condition.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TrailingComma.hasValue() ? TrailingComma->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ConditionElementSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ConditionElementSyntax
SyntaxFactory::makeBlankConditionElement(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ConditionElement, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Expr),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ConditionElementSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
AvailabilityConditionSyntax
SyntaxFactory::makeAvailabilityCondition(TokenSyntax PoundAvailableKeyword, TokenSyntax LeftParen, AvailabilitySpecListSyntax AvailabilitySpec, TokenSyntax RightParen,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::AvailabilityCondition, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    PoundAvailableKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftParen.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    AvailabilitySpec.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightParen.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<AvailabilityConditionSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

AvailabilityConditionSyntax
SyntaxFactory::makeBlankAvailabilityCondition(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::AvailabilityCondition, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::pound_available, OwnedString::makeUnowned("#available")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::l_paren, OwnedString::makeUnowned("(")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::AvailabilitySpecList),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::r_paren, OwnedString::makeUnowned(")")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<AvailabilityConditionSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
MatchingPatternConditionSyntax
SyntaxFactory::makeMatchingPatternCondition(TokenSyntax CaseKeyword, PatternSyntax Pattern, llvm::Optional<TypeAnnotationSyntax> TypeAnnotation, InitializerClauseSyntax Initializer,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::MatchingPatternCondition, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    CaseKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Pattern.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TypeAnnotation.hasValue() ? TypeAnnotation->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Initializer.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<MatchingPatternConditionSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

MatchingPatternConditionSyntax
SyntaxFactory::makeBlankMatchingPatternCondition(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::MatchingPatternCondition, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_case, OwnedString::makeUnowned("case")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Pattern),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::InitializerClause),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<MatchingPatternConditionSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
OptionalBindingConditionSyntax
SyntaxFactory::makeOptionalBindingCondition(TokenSyntax LetOrVarKeyword, PatternSyntax Pattern, llvm::Optional<TypeAnnotationSyntax> TypeAnnotation, InitializerClauseSyntax Initializer,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::OptionalBindingCondition, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LetOrVarKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Pattern.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TypeAnnotation.hasValue() ? TypeAnnotation->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Initializer.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<OptionalBindingConditionSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

OptionalBindingConditionSyntax
SyntaxFactory::makeBlankOptionalBindingCondition(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::OptionalBindingCondition, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_let, OwnedString::makeUnowned("let")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Pattern),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::InitializerClause),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<OptionalBindingConditionSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ConditionElementListSyntax
SyntaxFactory::makeConditionElementList(
    const std::vector<ConditionElementSyntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::ConditionElementList,
                             layout, SourcePresence::Present, Arena);
  return make<ConditionElementListSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ConditionElementListSyntax
SyntaxFactory::makeBlankConditionElementList(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ConditionElementList, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ConditionElementListSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
DeclarationStmtSyntax
SyntaxFactory::makeDeclarationStmt(DeclSyntax Declaration,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::DeclarationStmt, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Declaration.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<DeclarationStmtSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

DeclarationStmtSyntax
SyntaxFactory::makeBlankDeclarationStmt(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::DeclarationStmt, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Decl),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<DeclarationStmtSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ThrowStmtSyntax
SyntaxFactory::makeThrowStmt(TokenSyntax ThrowKeyword, ExprSyntax Expression,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::ThrowStmt, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ThrowKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Expression.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ThrowStmtSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ThrowStmtSyntax
SyntaxFactory::makeBlankThrowStmt(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ThrowStmt, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_throw, OwnedString::makeUnowned("throw")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Expr),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ThrowStmtSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
IfStmtSyntax
SyntaxFactory::makeIfStmt(llvm::Optional<TokenSyntax> LabelName, llvm::Optional<TokenSyntax> LabelColon, TokenSyntax IfKeyword, ConditionElementListSyntax Conditions, CodeBlockSyntax Body, llvm::Optional<TokenSyntax> ElseKeyword, llvm::Optional<Syntax> ElseBody,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::IfStmt, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LabelName.hasValue() ? LabelName->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LabelColon.hasValue() ? LabelColon->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    IfKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Conditions.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Body.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ElseKeyword.hasValue() ? ElseKeyword->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ElseBody.hasValue() ? ElseBody->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<IfStmtSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

IfStmtSyntax
SyntaxFactory::makeBlankIfStmt(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::IfStmt, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_if, OwnedString::makeUnowned("if")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::ConditionElementList),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::CodeBlock),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<IfStmtSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ElseIfContinuationSyntax
SyntaxFactory::makeElseIfContinuation(IfStmtSyntax IfStatement,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::ElseIfContinuation, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    IfStatement.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ElseIfContinuationSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ElseIfContinuationSyntax
SyntaxFactory::makeBlankElseIfContinuation(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ElseIfContinuation, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::IfStmt),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ElseIfContinuationSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ElseBlockSyntax
SyntaxFactory::makeElseBlock(TokenSyntax ElseKeyword, CodeBlockSyntax Body,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::ElseBlock, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ElseKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Body.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ElseBlockSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ElseBlockSyntax
SyntaxFactory::makeBlankElseBlock(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ElseBlock, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_else, OwnedString::makeUnowned("else")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::CodeBlock),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ElseBlockSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
SwitchCaseSyntax
SyntaxFactory::makeSwitchCase(llvm::Optional<AttributeSyntax> UnknownAttr, Syntax Label, CodeBlockItemListSyntax Statements,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::SwitchCase, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    UnknownAttr.hasValue() ? UnknownAttr->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Label.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Statements.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<SwitchCaseSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

SwitchCaseSyntax
SyntaxFactory::makeBlankSwitchCase(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::SwitchCase, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::SwitchDefaultLabel),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::CodeBlockItemList),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<SwitchCaseSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
SwitchDefaultLabelSyntax
SyntaxFactory::makeSwitchDefaultLabel(TokenSyntax DefaultKeyword, TokenSyntax Colon,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::SwitchDefaultLabel, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    DefaultKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Colon.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<SwitchDefaultLabelSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

SwitchDefaultLabelSyntax
SyntaxFactory::makeBlankSwitchDefaultLabel(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::SwitchDefaultLabel, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_default, OwnedString::makeUnowned("default")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::colon, OwnedString::makeUnowned(":")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<SwitchDefaultLabelSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
CaseItemSyntax
SyntaxFactory::makeCaseItem(PatternSyntax Pattern, llvm::Optional<WhereClauseSyntax> WhereClause, llvm::Optional<TokenSyntax> TrailingComma,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::CaseItem, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Pattern.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    WhereClause.hasValue() ? WhereClause->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TrailingComma.hasValue() ? TrailingComma->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<CaseItemSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

CaseItemSyntax
SyntaxFactory::makeBlankCaseItem(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::CaseItem, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Pattern),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<CaseItemSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
SwitchCaseLabelSyntax
SyntaxFactory::makeSwitchCaseLabel(TokenSyntax CaseKeyword, CaseItemListSyntax CaseItems, TokenSyntax Colon,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::SwitchCaseLabel, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    CaseKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    CaseItems.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Colon.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<SwitchCaseLabelSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

SwitchCaseLabelSyntax
SyntaxFactory::makeBlankSwitchCaseLabel(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::SwitchCaseLabel, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_case, OwnedString::makeUnowned("case")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::CaseItemList),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::colon, OwnedString::makeUnowned(":")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<SwitchCaseLabelSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
CatchClauseSyntax
SyntaxFactory::makeCatchClause(TokenSyntax CatchKeyword, llvm::Optional<PatternSyntax> Pattern, llvm::Optional<WhereClauseSyntax> WhereClause, CodeBlockSyntax Body,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::CatchClause, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    CatchKeyword.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Pattern.hasValue() ? Pattern->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    WhereClause.hasValue() ? WhereClause->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Body.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<CatchClauseSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

CatchClauseSyntax
SyntaxFactory::makeBlankCatchClause(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::CatchClause, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_catch, OwnedString::makeUnowned("catch")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::CodeBlock),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<CatchClauseSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
PoundAssertStmtSyntax
SyntaxFactory::makePoundAssertStmt(TokenSyntax PoundAssert, TokenSyntax LeftParen, ExprSyntax Condition, llvm::Optional<TokenSyntax> Comma, llvm::Optional<TokenSyntax> Message, TokenSyntax RightParen,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::PoundAssertStmt, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    PoundAssert.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftParen.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Condition.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Comma.hasValue() ? Comma->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Message.hasValue() ? Message->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightParen.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PoundAssertStmtSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

PoundAssertStmtSyntax
SyntaxFactory::makeBlankPoundAssertStmt(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::PoundAssertStmt, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::pound_assert, OwnedString::makeUnowned("#assert")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::l_paren, OwnedString::makeUnowned("(")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Expr),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::r_paren, OwnedString::makeUnowned(")")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<PoundAssertStmtSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
GenericWhereClauseSyntax
SyntaxFactory::makeGenericWhereClause(TokenSyntax WhereKeyword, GenericRequirementListSyntax RequirementList,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::GenericWhereClause, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    WhereKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RequirementList.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<GenericWhereClauseSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

GenericWhereClauseSyntax
SyntaxFactory::makeBlankGenericWhereClause(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::GenericWhereClause, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_where, OwnedString::makeUnowned("where")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::GenericRequirementList),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<GenericWhereClauseSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
GenericRequirementListSyntax
SyntaxFactory::makeGenericRequirementList(
    const std::vector<Syntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::GenericRequirementList,
                             layout, SourcePresence::Present, Arena);
  return make<GenericRequirementListSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

GenericRequirementListSyntax
SyntaxFactory::makeBlankGenericRequirementList(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::GenericRequirementList, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<GenericRequirementListSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
SameTypeRequirementSyntax
SyntaxFactory::makeSameTypeRequirement(TypeSyntax LeftTypeIdentifier, TokenSyntax EqualityToken, TypeSyntax RightTypeIdentifier, llvm::Optional<TokenSyntax> TrailingComma,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::SameTypeRequirement, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftTypeIdentifier.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    EqualityToken.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightTypeIdentifier.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TrailingComma.hasValue() ? TrailingComma->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<SameTypeRequirementSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

SameTypeRequirementSyntax
SyntaxFactory::makeBlankSameTypeRequirement(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::SameTypeRequirement, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Type),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::oper_binary_spaced, OwnedString::makeUnowned("")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Type),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<SameTypeRequirementSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
GenericParameterListSyntax
SyntaxFactory::makeGenericParameterList(
    const std::vector<GenericParameterSyntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::GenericParameterList,
                             layout, SourcePresence::Present, Arena);
  return make<GenericParameterListSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

GenericParameterListSyntax
SyntaxFactory::makeBlankGenericParameterList(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::GenericParameterList, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<GenericParameterListSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
GenericParameterSyntax
SyntaxFactory::makeGenericParameter(llvm::Optional<AttributeListSyntax> Attributes, TokenSyntax Name, llvm::Optional<TokenSyntax> Colon, llvm::Optional<TypeSyntax> InheritedType, llvm::Optional<TokenSyntax> TrailingComma,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::GenericParameter, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Attributes.hasValue() ? Attributes->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Name.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Colon.hasValue() ? Colon->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    InheritedType.hasValue() ? InheritedType->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TrailingComma.hasValue() ? TrailingComma->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<GenericParameterSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

GenericParameterSyntax
SyntaxFactory::makeBlankGenericParameter(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::GenericParameter, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::identifier, OwnedString::makeUnowned("")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<GenericParameterSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
GenericParameterClauseSyntax
SyntaxFactory::makeGenericParameterClause(TokenSyntax LeftAngleBracket, GenericParameterListSyntax GenericParameterList, TokenSyntax RightAngleBracket,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::GenericParameterClause, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftAngleBracket.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    GenericParameterList.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightAngleBracket.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<GenericParameterClauseSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

GenericParameterClauseSyntax
SyntaxFactory::makeBlankGenericParameterClause(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::GenericParameterClause, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::l_angle, OwnedString::makeUnowned("<")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::GenericParameterList),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::r_angle, OwnedString::makeUnowned(">")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<GenericParameterClauseSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ConformanceRequirementSyntax
SyntaxFactory::makeConformanceRequirement(TypeSyntax LeftTypeIdentifier, TokenSyntax Colon, TypeSyntax RightTypeIdentifier, llvm::Optional<TokenSyntax> TrailingComma,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::ConformanceRequirement, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftTypeIdentifier.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Colon.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightTypeIdentifier.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TrailingComma.hasValue() ? TrailingComma->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ConformanceRequirementSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ConformanceRequirementSyntax
SyntaxFactory::makeBlankConformanceRequirement(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ConformanceRequirement, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Type),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::colon, OwnedString::makeUnowned(":")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Type),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ConformanceRequirementSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
SimpleTypeIdentifierSyntax
SyntaxFactory::makeSimpleTypeIdentifier(TokenSyntax Name, llvm::Optional<GenericArgumentClauseSyntax> GenericArgumentClause,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::SimpleTypeIdentifier, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Name.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    GenericArgumentClause.hasValue() ? GenericArgumentClause->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<SimpleTypeIdentifierSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

SimpleTypeIdentifierSyntax
SyntaxFactory::makeBlankSimpleTypeIdentifier(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::SimpleTypeIdentifier, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::identifier, OwnedString::makeUnowned("")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<SimpleTypeIdentifierSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
MemberTypeIdentifierSyntax
SyntaxFactory::makeMemberTypeIdentifier(TypeSyntax BaseType, TokenSyntax Period, TokenSyntax Name, llvm::Optional<GenericArgumentClauseSyntax> GenericArgumentClause,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::MemberTypeIdentifier, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    BaseType.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Period.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Name.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    GenericArgumentClause.hasValue() ? GenericArgumentClause->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<MemberTypeIdentifierSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

MemberTypeIdentifierSyntax
SyntaxFactory::makeBlankMemberTypeIdentifier(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::MemberTypeIdentifier, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Type),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::period, OwnedString::makeUnowned(".")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::identifier, OwnedString::makeUnowned("")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<MemberTypeIdentifierSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ClassRestrictionTypeSyntax
SyntaxFactory::makeClassRestrictionType(TokenSyntax ClassKeyword,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::ClassRestrictionType, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ClassKeyword.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ClassRestrictionTypeSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ClassRestrictionTypeSyntax
SyntaxFactory::makeBlankClassRestrictionType(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ClassRestrictionType, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_class, OwnedString::makeUnowned("class")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ClassRestrictionTypeSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ArrayTypeSyntax
SyntaxFactory::makeArrayType(TokenSyntax LeftSquareBracket, TypeSyntax ElementType, TokenSyntax RightSquareBracket,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::ArrayType, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftSquareBracket.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ElementType.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightSquareBracket.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ArrayTypeSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ArrayTypeSyntax
SyntaxFactory::makeBlankArrayType(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ArrayType, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::l_square, OwnedString::makeUnowned("[")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Type),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::r_square, OwnedString::makeUnowned("]")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ArrayTypeSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
DictionaryTypeSyntax
SyntaxFactory::makeDictionaryType(TokenSyntax LeftSquareBracket, TypeSyntax KeyType, TokenSyntax Colon, TypeSyntax ValueType, TokenSyntax RightSquareBracket,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::DictionaryType, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftSquareBracket.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    KeyType.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Colon.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ValueType.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightSquareBracket.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<DictionaryTypeSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

DictionaryTypeSyntax
SyntaxFactory::makeBlankDictionaryType(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::DictionaryType, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::l_square, OwnedString::makeUnowned("[")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Type),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::colon, OwnedString::makeUnowned(":")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Type),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::r_square, OwnedString::makeUnowned("]")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<DictionaryTypeSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
MetatypeTypeSyntax
SyntaxFactory::makeMetatypeType(TypeSyntax BaseType, TokenSyntax Period, TokenSyntax TypeOrProtocol,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::MetatypeType, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    BaseType.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Period.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TypeOrProtocol.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<MetatypeTypeSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

MetatypeTypeSyntax
SyntaxFactory::makeBlankMetatypeType(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::MetatypeType, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Type),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::period, OwnedString::makeUnowned(".")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::identifier, OwnedString::makeUnowned("")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<MetatypeTypeSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
OptionalTypeSyntax
SyntaxFactory::makeOptionalType(TypeSyntax WrappedType, TokenSyntax QuestionMark,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::OptionalType, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    WrappedType.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    QuestionMark.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<OptionalTypeSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

OptionalTypeSyntax
SyntaxFactory::makeBlankOptionalType(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::OptionalType, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Type),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::question_postfix, OwnedString::makeUnowned("?")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<OptionalTypeSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
SomeTypeSyntax
SyntaxFactory::makeSomeType(TokenSyntax SomeSpecifier, TypeSyntax BaseType,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::SomeType, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    SomeSpecifier.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    BaseType.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<SomeTypeSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

SomeTypeSyntax
SyntaxFactory::makeBlankSomeType(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::SomeType, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::identifier, OwnedString::makeUnowned("")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Type),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<SomeTypeSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ImplicitlyUnwrappedOptionalTypeSyntax
SyntaxFactory::makeImplicitlyUnwrappedOptionalType(TypeSyntax WrappedType, TokenSyntax ExclamationMark,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::ImplicitlyUnwrappedOptionalType, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    WrappedType.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ExclamationMark.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ImplicitlyUnwrappedOptionalTypeSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ImplicitlyUnwrappedOptionalTypeSyntax
SyntaxFactory::makeBlankImplicitlyUnwrappedOptionalType(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ImplicitlyUnwrappedOptionalType, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Type),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::exclaim_postfix, OwnedString::makeUnowned("!")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ImplicitlyUnwrappedOptionalTypeSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
CompositionTypeElementSyntax
SyntaxFactory::makeCompositionTypeElement(TypeSyntax Type, llvm::Optional<TokenSyntax> Ampersand,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::CompositionTypeElement, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Type.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Ampersand.hasValue() ? Ampersand->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<CompositionTypeElementSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

CompositionTypeElementSyntax
SyntaxFactory::makeBlankCompositionTypeElement(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::CompositionTypeElement, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Type),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<CompositionTypeElementSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
CompositionTypeElementListSyntax
SyntaxFactory::makeCompositionTypeElementList(
    const std::vector<CompositionTypeElementSyntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::CompositionTypeElementList,
                             layout, SourcePresence::Present, Arena);
  return make<CompositionTypeElementListSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

CompositionTypeElementListSyntax
SyntaxFactory::makeBlankCompositionTypeElementList(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::CompositionTypeElementList, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<CompositionTypeElementListSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
CompositionTypeSyntax
SyntaxFactory::makeCompositionType(CompositionTypeElementListSyntax Elements,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::CompositionType, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Elements.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<CompositionTypeSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

CompositionTypeSyntax
SyntaxFactory::makeBlankCompositionType(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::CompositionType, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::CompositionTypeElementList),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<CompositionTypeSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
TupleTypeElementSyntax
SyntaxFactory::makeTupleTypeElement(llvm::Optional<TokenSyntax> InOut, llvm::Optional<TokenSyntax> Name, llvm::Optional<TokenSyntax> SecondName, llvm::Optional<TokenSyntax> Colon, TypeSyntax Type, llvm::Optional<TokenSyntax> Ellipsis, llvm::Optional<InitializerClauseSyntax> Initializer, llvm::Optional<TokenSyntax> TrailingComma,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::TupleTypeElement, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    InOut.hasValue() ? InOut->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Name.hasValue() ? Name->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    SecondName.hasValue() ? SecondName->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Colon.hasValue() ? Colon->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Type.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Ellipsis.hasValue() ? Ellipsis->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Initializer.hasValue() ? Initializer->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TrailingComma.hasValue() ? TrailingComma->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<TupleTypeElementSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

TupleTypeElementSyntax
SyntaxFactory::makeBlankTupleTypeElement(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::TupleTypeElement, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Type),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<TupleTypeElementSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
TupleTypeElementListSyntax
SyntaxFactory::makeTupleTypeElementList(
    const std::vector<TupleTypeElementSyntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::TupleTypeElementList,
                             layout, SourcePresence::Present, Arena);
  return make<TupleTypeElementListSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

TupleTypeElementListSyntax
SyntaxFactory::makeBlankTupleTypeElementList(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::TupleTypeElementList, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<TupleTypeElementListSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
TupleTypeSyntax
SyntaxFactory::makeTupleType(TokenSyntax LeftParen, TupleTypeElementListSyntax Elements, TokenSyntax RightParen,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::TupleType, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftParen.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Elements.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightParen.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<TupleTypeSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

TupleTypeSyntax
SyntaxFactory::makeBlankTupleType(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::TupleType, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::l_paren, OwnedString::makeUnowned("(")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::TupleTypeElementList),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::r_paren, OwnedString::makeUnowned(")")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<TupleTypeSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
FunctionTypeSyntax
SyntaxFactory::makeFunctionType(TokenSyntax LeftParen, TupleTypeElementListSyntax Arguments, TokenSyntax RightParen, llvm::Optional<TokenSyntax> ThrowsOrRethrowsKeyword, TokenSyntax Arrow, TypeSyntax ReturnType,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::FunctionType, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftParen.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Arguments.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightParen.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ThrowsOrRethrowsKeyword.hasValue() ? ThrowsOrRethrowsKeyword->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Arrow.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ReturnType.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<FunctionTypeSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

FunctionTypeSyntax
SyntaxFactory::makeBlankFunctionType(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::FunctionType, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::l_paren, OwnedString::makeUnowned("(")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::TupleTypeElementList),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::r_paren, OwnedString::makeUnowned(")")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::arrow, OwnedString::makeUnowned("->")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Type),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<FunctionTypeSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
AttributedTypeSyntax
SyntaxFactory::makeAttributedType(llvm::Optional<TokenSyntax> Specifier, llvm::Optional<AttributeListSyntax> Attributes, TypeSyntax BaseType,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::AttributedType, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Specifier.hasValue() ? Specifier->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Attributes.hasValue() ? Attributes->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    BaseType.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<AttributedTypeSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

AttributedTypeSyntax
SyntaxFactory::makeBlankAttributedType(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::AttributedType, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Type),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<AttributedTypeSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
GenericArgumentListSyntax
SyntaxFactory::makeGenericArgumentList(
    const std::vector<GenericArgumentSyntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::GenericArgumentList,
                             layout, SourcePresence::Present, Arena);
  return make<GenericArgumentListSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

GenericArgumentListSyntax
SyntaxFactory::makeBlankGenericArgumentList(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::GenericArgumentList, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<GenericArgumentListSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
GenericArgumentSyntax
SyntaxFactory::makeGenericArgument(TypeSyntax ArgumentType, llvm::Optional<TokenSyntax> TrailingComma,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::GenericArgument, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ArgumentType.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TrailingComma.hasValue() ? TrailingComma->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<GenericArgumentSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

GenericArgumentSyntax
SyntaxFactory::makeBlankGenericArgument(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::GenericArgument, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Type),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<GenericArgumentSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
GenericArgumentClauseSyntax
SyntaxFactory::makeGenericArgumentClause(TokenSyntax LeftAngleBracket, GenericArgumentListSyntax Arguments, TokenSyntax RightAngleBracket,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::GenericArgumentClause, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftAngleBracket.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Arguments.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightAngleBracket.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<GenericArgumentClauseSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

GenericArgumentClauseSyntax
SyntaxFactory::makeBlankGenericArgumentClause(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::GenericArgumentClause, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::l_angle, OwnedString::makeUnowned("<")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::GenericArgumentList),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::r_angle, OwnedString::makeUnowned(">")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<GenericArgumentClauseSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
TypeAnnotationSyntax
SyntaxFactory::makeTypeAnnotation(TokenSyntax Colon, TypeSyntax Type,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::TypeAnnotation, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Colon.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Type.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<TypeAnnotationSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

TypeAnnotationSyntax
SyntaxFactory::makeBlankTypeAnnotation(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::TypeAnnotation, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::colon, OwnedString::makeUnowned(":")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Type),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<TypeAnnotationSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
EnumCasePatternSyntax
SyntaxFactory::makeEnumCasePattern(llvm::Optional<TypeSyntax> Type, TokenSyntax Period, TokenSyntax CaseName, llvm::Optional<TuplePatternSyntax> AssociatedTuple,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::EnumCasePattern, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Type.hasValue() ? Type->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Period.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    CaseName.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    AssociatedTuple.hasValue() ? AssociatedTuple->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<EnumCasePatternSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

EnumCasePatternSyntax
SyntaxFactory::makeBlankEnumCasePattern(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::EnumCasePattern, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::period, OwnedString::makeUnowned(".")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::identifier, OwnedString::makeUnowned("")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<EnumCasePatternSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
IsTypePatternSyntax
SyntaxFactory::makeIsTypePattern(TokenSyntax IsKeyword, TypeSyntax Type,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::IsTypePattern, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    IsKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Type.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<IsTypePatternSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

IsTypePatternSyntax
SyntaxFactory::makeBlankIsTypePattern(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::IsTypePattern, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_is, OwnedString::makeUnowned("is")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Type),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<IsTypePatternSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
OptionalPatternSyntax
SyntaxFactory::makeOptionalPattern(PatternSyntax SubPattern, TokenSyntax QuestionMark,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::OptionalPattern, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    SubPattern.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    QuestionMark.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<OptionalPatternSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

OptionalPatternSyntax
SyntaxFactory::makeBlankOptionalPattern(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::OptionalPattern, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Pattern),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::question_postfix, OwnedString::makeUnowned("?")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<OptionalPatternSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
IdentifierPatternSyntax
SyntaxFactory::makeIdentifierPattern(TokenSyntax Identifier,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::IdentifierPattern, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Identifier.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<IdentifierPatternSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

IdentifierPatternSyntax
SyntaxFactory::makeBlankIdentifierPattern(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::IdentifierPattern, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_self, OwnedString::makeUnowned("self")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<IdentifierPatternSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
AsTypePatternSyntax
SyntaxFactory::makeAsTypePattern(PatternSyntax Pattern, TokenSyntax AsKeyword, TypeSyntax Type,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::AsTypePattern, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Pattern.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    AsKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Type.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<AsTypePatternSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

AsTypePatternSyntax
SyntaxFactory::makeBlankAsTypePattern(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::AsTypePattern, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Pattern),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_as, OwnedString::makeUnowned("as")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Type),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<AsTypePatternSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
TuplePatternSyntax
SyntaxFactory::makeTuplePattern(TokenSyntax LeftParen, TuplePatternElementListSyntax Elements, TokenSyntax RightParen,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::TuplePattern, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LeftParen.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Elements.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RightParen.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<TuplePatternSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

TuplePatternSyntax
SyntaxFactory::makeBlankTuplePattern(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::TuplePattern, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::l_paren, OwnedString::makeUnowned("(")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::TuplePatternElementList),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::r_paren, OwnedString::makeUnowned(")")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<TuplePatternSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
WildcardPatternSyntax
SyntaxFactory::makeWildcardPattern(TokenSyntax Wildcard, llvm::Optional<TypeAnnotationSyntax> TypeAnnotation,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::WildcardPattern, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Wildcard.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TypeAnnotation.hasValue() ? TypeAnnotation->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<WildcardPatternSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

WildcardPatternSyntax
SyntaxFactory::makeBlankWildcardPattern(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::WildcardPattern, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw__, OwnedString::makeUnowned("_")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<WildcardPatternSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
TuplePatternElementSyntax
SyntaxFactory::makeTuplePatternElement(llvm::Optional<TokenSyntax> LabelName, llvm::Optional<TokenSyntax> LabelColon, PatternSyntax Pattern, llvm::Optional<TokenSyntax> TrailingComma,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::TuplePatternElement, {
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LabelName.hasValue() ? LabelName->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LabelColon.hasValue() ? LabelColon->getRaw() : nullptr,
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Pattern.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TrailingComma.hasValue() ? TrailingComma->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<TuplePatternElementSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

TuplePatternElementSyntax
SyntaxFactory::makeBlankTuplePatternElement(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::TuplePatternElement, {
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Pattern),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<TuplePatternElementSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ExpressionPatternSyntax
SyntaxFactory::makeExpressionPattern(ExprSyntax Expression,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::ExpressionPattern, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Expression.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ExpressionPatternSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ExpressionPatternSyntax
SyntaxFactory::makeBlankExpressionPattern(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ExpressionPattern, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Expr),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ExpressionPatternSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
TuplePatternElementListSyntax
SyntaxFactory::makeTuplePatternElementList(
    const std::vector<TuplePatternElementSyntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::TuplePatternElementList,
                             layout, SourcePresence::Present, Arena);
  return make<TuplePatternElementListSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

TuplePatternElementListSyntax
SyntaxFactory::makeBlankTuplePatternElementList(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::TuplePatternElementList, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<TuplePatternElementListSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
ValueBindingPatternSyntax
SyntaxFactory::makeValueBindingPattern(TokenSyntax LetOrVarKeyword, PatternSyntax ValuePattern,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::ValueBindingPattern, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    LetOrVarKeyword.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    ValuePattern.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ValueBindingPatternSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

ValueBindingPatternSyntax
SyntaxFactory::makeBlankValueBindingPattern(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::ValueBindingPattern, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::kw_let, OwnedString::makeUnowned("let")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::Pattern),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<ValueBindingPatternSyntax>(raw);
}
#line 205 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
AvailabilitySpecListSyntax
SyntaxFactory::makeAvailabilitySpecList(
    const std::vector<AvailabilityArgumentSyntax> &elements,
    RC<SyntaxArena> Arena) {
  std::vector<RC<RawSyntax>> layout;
  layout.reserve(elements.size());
  for (auto &element : elements) {
    layout.push_back(element.getRaw());
  }
  auto raw = RawSyntax::make(SyntaxKind::AvailabilitySpecList,
                             layout, SourcePresence::Present, Arena);
  return make<AvailabilitySpecListSyntax>(raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

AvailabilitySpecListSyntax
SyntaxFactory::makeBlankAvailabilitySpecList(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::AvailabilitySpecList, {
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<AvailabilitySpecListSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
AvailabilityArgumentSyntax
SyntaxFactory::makeAvailabilityArgument(Syntax Entry, llvm::Optional<TokenSyntax> TrailingComma,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::AvailabilityArgument, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Entry.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    TrailingComma.hasValue() ? TrailingComma->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<AvailabilityArgumentSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

AvailabilityArgumentSyntax
SyntaxFactory::makeBlankAvailabilityArgument(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::AvailabilityArgument, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::oper_binary_spaced, OwnedString::makeUnowned("")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<AvailabilityArgumentSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
AvailabilityLabeledArgumentSyntax
SyntaxFactory::makeAvailabilityLabeledArgument(TokenSyntax Label, TokenSyntax Colon, Syntax Value,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::AvailabilityLabeledArgument, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Label.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Colon.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Value.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<AvailabilityLabeledArgumentSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

AvailabilityLabeledArgumentSyntax
SyntaxFactory::makeBlankAvailabilityLabeledArgument(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::AvailabilityLabeledArgument, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::identifier, OwnedString::makeUnowned("")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::colon, OwnedString::makeUnowned(":")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::string_literal, OwnedString::makeUnowned("")),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<AvailabilityLabeledArgumentSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
AvailabilityVersionRestrictionSyntax
SyntaxFactory::makeAvailabilityVersionRestriction(TokenSyntax Platform, VersionTupleSyntax Version,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::AvailabilityVersionRestriction, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Platform.getRaw(),
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    Version.getRaw(),
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<AvailabilityVersionRestrictionSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

AvailabilityVersionRestrictionSyntax
SyntaxFactory::makeBlankAvailabilityVersionRestriction(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::AvailabilityVersionRestriction, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::identifier, OwnedString::makeUnowned("")),
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(SyntaxKind::VersionTuple),
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<AvailabilityVersionRestrictionSyntax>(raw);
}
#line 190 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
VersionTupleSyntax
SyntaxFactory::makeVersionTuple(Syntax MajorMinor, llvm::Optional<TokenSyntax> PatchPeriod, llvm::Optional<TokenSyntax> PatchVersion,
                                       RC<SyntaxArena> Arena) {
  auto Raw = RawSyntax::make(SyntaxKind::VersionTuple, {
#line 198 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    MajorMinor.getRaw(),
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    PatchPeriod.hasValue() ? PatchPeriod->getRaw() : nullptr,
#line 196 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    PatchVersion.hasValue() ? PatchVersion->getRaw() : nullptr,
#line 201 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<VersionTupleSyntax>(Raw);
}
#line 219 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

VersionTupleSyntax
SyntaxFactory::makeBlankVersionTuple(RC<SyntaxArena> Arena) {
  auto raw = RawSyntax::make(SyntaxKind::VersionTuple, {
#line 227 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    RawSyntax::missing(tok::integer_literal, OwnedString::makeUnowned("")),
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 225 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
    nullptr,
#line 230 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  }, SourcePresence::Present, Arena);
  return make<VersionTupleSyntax>(raw);
}
#line 234 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeAssociatedtypeKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_associatedtype,
                     OwnedString::makeUnowned("associatedtype"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeClassKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_class,
                     OwnedString::makeUnowned("class"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeDeinitKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_deinit,
                     OwnedString::makeUnowned("deinit"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeEnumKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_enum,
                     OwnedString::makeUnowned("enum"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeExtensionKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_extension,
                     OwnedString::makeUnowned("extension"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeFuncKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_func,
                     OwnedString::makeUnowned("func"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeImportKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_import,
                     OwnedString::makeUnowned("import"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeInitKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_init,
                     OwnedString::makeUnowned("init"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeInoutKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_inout,
                     OwnedString::makeUnowned("inout"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeLetKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_let,
                     OwnedString::makeUnowned("let"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeOperatorKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_operator,
                     OwnedString::makeUnowned("operator"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makePrecedencegroupKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_precedencegroup,
                     OwnedString::makeUnowned("precedencegroup"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeProtocolKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_protocol,
                     OwnedString::makeUnowned("protocol"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeStructKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_struct,
                     OwnedString::makeUnowned("struct"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeSubscriptKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_subscript,
                     OwnedString::makeUnowned("subscript"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeTypealiasKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_typealias,
                     OwnedString::makeUnowned("typealias"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeVarKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_var,
                     OwnedString::makeUnowned("var"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeFileprivateKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_fileprivate,
                     OwnedString::makeUnowned("fileprivate"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeInternalKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_internal,
                     OwnedString::makeUnowned("internal"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makePrivateKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_private,
                     OwnedString::makeUnowned("private"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makePublicKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_public,
                     OwnedString::makeUnowned("public"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeStaticKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_static,
                     OwnedString::makeUnowned("static"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeDeferKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_defer,
                     OwnedString::makeUnowned("defer"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeIfKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_if,
                     OwnedString::makeUnowned("if"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeGuardKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_guard,
                     OwnedString::makeUnowned("guard"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeDoKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_do,
                     OwnedString::makeUnowned("do"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeRepeatKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_repeat,
                     OwnedString::makeUnowned("repeat"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeElseKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_else,
                     OwnedString::makeUnowned("else"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeForKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_for,
                     OwnedString::makeUnowned("for"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeInKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_in,
                     OwnedString::makeUnowned("in"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeWhileKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_while,
                     OwnedString::makeUnowned("while"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeReturnKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_return,
                     OwnedString::makeUnowned("return"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeBreakKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_break,
                     OwnedString::makeUnowned("break"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeContinueKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_continue,
                     OwnedString::makeUnowned("continue"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeFallthroughKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_fallthrough,
                     OwnedString::makeUnowned("fallthrough"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeSwitchKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_switch,
                     OwnedString::makeUnowned("switch"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeCaseKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_case,
                     OwnedString::makeUnowned("case"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeDefaultKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_default,
                     OwnedString::makeUnowned("default"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeWhereKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_where,
                     OwnedString::makeUnowned("where"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeCatchKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_catch,
                     OwnedString::makeUnowned("catch"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeThrowKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_throw,
                     OwnedString::makeUnowned("throw"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeAsKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_as,
                     OwnedString::makeUnowned("as"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeAnyKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_Any,
                     OwnedString::makeUnowned("Any"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeFalseKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_false,
                     OwnedString::makeUnowned("false"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeIsKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_is,
                     OwnedString::makeUnowned("is"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeNilKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_nil,
                     OwnedString::makeUnowned("nil"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeRethrowsKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_rethrows,
                     OwnedString::makeUnowned("rethrows"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeSuperKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_super,
                     OwnedString::makeUnowned("super"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeSelfKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_self,
                     OwnedString::makeUnowned("self"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeCapitalSelfKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_Self,
                     OwnedString::makeUnowned("Self"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeTrueKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_true,
                     OwnedString::makeUnowned("true"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeTryKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_try,
                     OwnedString::makeUnowned("try"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeThrowsKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_throws,
                     OwnedString::makeUnowned("throws"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::make__FILE__Keyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw___FILE__,
                     OwnedString::makeUnowned("__FILE__"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::make__LINE__Keyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw___LINE__,
                     OwnedString::makeUnowned("__LINE__"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::make__COLUMN__Keyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw___COLUMN__,
                     OwnedString::makeUnowned("__COLUMN__"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::make__FUNCTION__Keyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw___FUNCTION__,
                     OwnedString::makeUnowned("__FUNCTION__"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::make__DSO_HANDLE__Keyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw___DSO_HANDLE__,
                     OwnedString::makeUnowned("__DSO_HANDLE__"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeWildcardKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::kw__,
                     OwnedString::makeUnowned("_"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 247 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeLeftParenToken(const Trivia &LeadingTrivia,
                                        const Trivia &TrailingTrivia,
                                        RC<SyntaxArena> Arena) {
    return makeToken(tok::l_paren,
                     OwnedString::makeUnowned("("),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 247 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeRightParenToken(const Trivia &LeadingTrivia,
                                        const Trivia &TrailingTrivia,
                                        RC<SyntaxArena> Arena) {
    return makeToken(tok::r_paren,
                     OwnedString::makeUnowned(")"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 247 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeLeftBraceToken(const Trivia &LeadingTrivia,
                                        const Trivia &TrailingTrivia,
                                        RC<SyntaxArena> Arena) {
    return makeToken(tok::l_brace,
                     OwnedString::makeUnowned("{"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 247 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeRightBraceToken(const Trivia &LeadingTrivia,
                                        const Trivia &TrailingTrivia,
                                        RC<SyntaxArena> Arena) {
    return makeToken(tok::r_brace,
                     OwnedString::makeUnowned("}"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 247 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeLeftSquareBracketToken(const Trivia &LeadingTrivia,
                                        const Trivia &TrailingTrivia,
                                        RC<SyntaxArena> Arena) {
    return makeToken(tok::l_square,
                     OwnedString::makeUnowned("["),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 247 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeRightSquareBracketToken(const Trivia &LeadingTrivia,
                                        const Trivia &TrailingTrivia,
                                        RC<SyntaxArena> Arena) {
    return makeToken(tok::r_square,
                     OwnedString::makeUnowned("]"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 247 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeLeftAngleToken(const Trivia &LeadingTrivia,
                                        const Trivia &TrailingTrivia,
                                        RC<SyntaxArena> Arena) {
    return makeToken(tok::l_angle,
                     OwnedString::makeUnowned("<"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 247 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeRightAngleToken(const Trivia &LeadingTrivia,
                                        const Trivia &TrailingTrivia,
                                        RC<SyntaxArena> Arena) {
    return makeToken(tok::r_angle,
                     OwnedString::makeUnowned(">"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 247 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makePeriodToken(const Trivia &LeadingTrivia,
                                        const Trivia &TrailingTrivia,
                                        RC<SyntaxArena> Arena) {
    return makeToken(tok::period,
                     OwnedString::makeUnowned("."),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 247 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makePrefixPeriodToken(const Trivia &LeadingTrivia,
                                        const Trivia &TrailingTrivia,
                                        RC<SyntaxArena> Arena) {
    return makeToken(tok::period_prefix,
                     OwnedString::makeUnowned("."),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 247 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeCommaToken(const Trivia &LeadingTrivia,
                                        const Trivia &TrailingTrivia,
                                        RC<SyntaxArena> Arena) {
    return makeToken(tok::comma,
                     OwnedString::makeUnowned(","),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 247 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeEllipsisToken(const Trivia &LeadingTrivia,
                                        const Trivia &TrailingTrivia,
                                        RC<SyntaxArena> Arena) {
    return makeToken(tok::ellipsis,
                     OwnedString::makeUnowned("..."),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 247 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeColonToken(const Trivia &LeadingTrivia,
                                        const Trivia &TrailingTrivia,
                                        RC<SyntaxArena> Arena) {
    return makeToken(tok::colon,
                     OwnedString::makeUnowned(":"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 247 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeSemicolonToken(const Trivia &LeadingTrivia,
                                        const Trivia &TrailingTrivia,
                                        RC<SyntaxArena> Arena) {
    return makeToken(tok::semi,
                     OwnedString::makeUnowned(";"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 247 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeEqualToken(const Trivia &LeadingTrivia,
                                        const Trivia &TrailingTrivia,
                                        RC<SyntaxArena> Arena) {
    return makeToken(tok::equal,
                     OwnedString::makeUnowned("="),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 247 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeAtSignToken(const Trivia &LeadingTrivia,
                                        const Trivia &TrailingTrivia,
                                        RC<SyntaxArena> Arena) {
    return makeToken(tok::at_sign,
                     OwnedString::makeUnowned("@"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 247 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makePoundToken(const Trivia &LeadingTrivia,
                                        const Trivia &TrailingTrivia,
                                        RC<SyntaxArena> Arena) {
    return makeToken(tok::pound,
                     OwnedString::makeUnowned("#"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 247 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makePrefixAmpersandToken(const Trivia &LeadingTrivia,
                                        const Trivia &TrailingTrivia,
                                        RC<SyntaxArena> Arena) {
    return makeToken(tok::amp_prefix,
                     OwnedString::makeUnowned("&"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 247 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeArrowToken(const Trivia &LeadingTrivia,
                                        const Trivia &TrailingTrivia,
                                        RC<SyntaxArena> Arena) {
    return makeToken(tok::arrow,
                     OwnedString::makeUnowned("->"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 247 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeBacktickToken(const Trivia &LeadingTrivia,
                                        const Trivia &TrailingTrivia,
                                        RC<SyntaxArena> Arena) {
    return makeToken(tok::backtick,
                     OwnedString::makeUnowned("`"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 247 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeBackslashToken(const Trivia &LeadingTrivia,
                                        const Trivia &TrailingTrivia,
                                        RC<SyntaxArena> Arena) {
    return makeToken(tok::backslash,
                     OwnedString::makeUnowned("\\"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 247 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeExclamationMarkToken(const Trivia &LeadingTrivia,
                                        const Trivia &TrailingTrivia,
                                        RC<SyntaxArena> Arena) {
    return makeToken(tok::exclaim_postfix,
                     OwnedString::makeUnowned("!"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 247 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makePostfixQuestionMarkToken(const Trivia &LeadingTrivia,
                                        const Trivia &TrailingTrivia,
                                        RC<SyntaxArena> Arena) {
    return makeToken(tok::question_postfix,
                     OwnedString::makeUnowned("?"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 247 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeInfixQuestionMarkToken(const Trivia &LeadingTrivia,
                                        const Trivia &TrailingTrivia,
                                        RC<SyntaxArena> Arena) {
    return makeToken(tok::question_infix,
                     OwnedString::makeUnowned("?"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 247 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeStringQuoteToken(const Trivia &LeadingTrivia,
                                        const Trivia &TrailingTrivia,
                                        RC<SyntaxArena> Arena) {
    return makeToken(tok::string_quote,
                     OwnedString::makeUnowned("\""),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 247 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeSingleQuoteToken(const Trivia &LeadingTrivia,
                                        const Trivia &TrailingTrivia,
                                        RC<SyntaxArena> Arena) {
    return makeToken(tok::single_quote,
                     OwnedString::makeUnowned("\'"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 247 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeMultilineStringQuoteToken(const Trivia &LeadingTrivia,
                                        const Trivia &TrailingTrivia,
                                        RC<SyntaxArena> Arena) {
    return makeToken(tok::multiline_string_quote,
                     OwnedString::makeUnowned("\"\"\""),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makePoundKeyPathKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::pound_keyPath,
                     OwnedString::makeUnowned("#keyPath"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makePoundLineKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::pound_line,
                     OwnedString::makeUnowned("#line"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makePoundSelectorKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::pound_selector,
                     OwnedString::makeUnowned("#selector"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makePoundFileKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::pound_file,
                     OwnedString::makeUnowned("#file"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makePoundColumnKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::pound_column,
                     OwnedString::makeUnowned("#column"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makePoundFunctionKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::pound_function,
                     OwnedString::makeUnowned("#function"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makePoundDsohandleKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::pound_dsohandle,
                     OwnedString::makeUnowned("#dsohandle"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makePoundAssertKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::pound_assert,
                     OwnedString::makeUnowned("#assert"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makePoundSourceLocationKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::pound_sourceLocation,
                     OwnedString::makeUnowned("#sourceLocation"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makePoundWarningKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::pound_warning,
                     OwnedString::makeUnowned("#warning"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makePoundErrorKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::pound_error,
                     OwnedString::makeUnowned("#error"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makePoundIfKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::pound_if,
                     OwnedString::makeUnowned("#if"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makePoundElseKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::pound_else,
                     OwnedString::makeUnowned("#else"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makePoundElseifKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::pound_elseif,
                     OwnedString::makeUnowned("#elseif"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makePoundEndifKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::pound_endif,
                     OwnedString::makeUnowned("#endif"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makePoundAvailableKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::pound_available,
                     OwnedString::makeUnowned("#available"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makePoundFileLiteralKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::pound_fileLiteral,
                     OwnedString::makeUnowned("#fileLiteral"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makePoundImageLiteralKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::pound_imageLiteral,
                     OwnedString::makeUnowned("#imageLiteral"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 237 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makePoundColorLiteralKeyword(const Trivia &LeadingTrivia,
                                          const Trivia &TrailingTrivia,
                                          RC<SyntaxArena> Arena) {
    return makeToken(tok::pound_colorLiteral,
                     OwnedString::makeUnowned("#colorLiteral"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 257 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeIntegerLiteral(OwnedString Text,
                                   const Trivia &LeadingTrivia,
                                   const Trivia &TrailingTrivia,
                                   RC<SyntaxArena> Arena) {
    return makeToken(tok::integer_literal, Text,
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 257 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeFloatingLiteral(OwnedString Text,
                                   const Trivia &LeadingTrivia,
                                   const Trivia &TrailingTrivia,
                                   RC<SyntaxArena> Arena) {
    return makeToken(tok::floating_literal, Text,
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 257 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeStringLiteral(OwnedString Text,
                                   const Trivia &LeadingTrivia,
                                   const Trivia &TrailingTrivia,
                                   RC<SyntaxArena> Arena) {
    return makeToken(tok::string_literal, Text,
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 257 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeUnknown(OwnedString Text,
                                   const Trivia &LeadingTrivia,
                                   const Trivia &TrailingTrivia,
                                   RC<SyntaxArena> Arena) {
    return makeToken(tok::unknown, Text,
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 257 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeIdentifier(OwnedString Text,
                                   const Trivia &LeadingTrivia,
                                   const Trivia &TrailingTrivia,
                                   RC<SyntaxArena> Arena) {
    return makeToken(tok::identifier, Text,
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 257 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeUnspacedBinaryOperator(OwnedString Text,
                                   const Trivia &LeadingTrivia,
                                   const Trivia &TrailingTrivia,
                                   RC<SyntaxArena> Arena) {
    return makeToken(tok::oper_binary_unspaced, Text,
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 257 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeSpacedBinaryOperator(OwnedString Text,
                                   const Trivia &LeadingTrivia,
                                   const Trivia &TrailingTrivia,
                                   RC<SyntaxArena> Arena) {
    return makeToken(tok::oper_binary_spaced, Text,
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 257 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makePostfixOperator(OwnedString Text,
                                   const Trivia &LeadingTrivia,
                                   const Trivia &TrailingTrivia,
                                   RC<SyntaxArena> Arena) {
    return makeToken(tok::oper_postfix, Text,
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 257 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makePrefixOperator(OwnedString Text,
                                   const Trivia &LeadingTrivia,
                                   const Trivia &TrailingTrivia,
                                   RC<SyntaxArena> Arena) {
    return makeToken(tok::oper_prefix, Text,
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 257 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeDollarIdentifier(OwnedString Text,
                                   const Trivia &LeadingTrivia,
                                   const Trivia &TrailingTrivia,
                                   RC<SyntaxArena> Arena) {
    return makeToken(tok::dollarident, Text,
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 257 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeContextualKeyword(OwnedString Text,
                                   const Trivia &LeadingTrivia,
                                   const Trivia &TrailingTrivia,
                                   RC<SyntaxArena> Arena) {
    return makeToken(tok::contextual_keyword, Text,
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 257 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeRawStringDelimiter(OwnedString Text,
                                   const Trivia &LeadingTrivia,
                                   const Trivia &TrailingTrivia,
                                   RC<SyntaxArena> Arena) {
    return makeToken(tok::raw_string_delimiter, Text,
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 257 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeStringSegment(OwnedString Text,
                                   const Trivia &LeadingTrivia,
                                   const Trivia &TrailingTrivia,
                                   RC<SyntaxArena> Arena) {
    return makeToken(tok::string_segment, Text,
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 247 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeStringInterpolationAnchorToken(const Trivia &LeadingTrivia,
                                        const Trivia &TrailingTrivia,
                                        RC<SyntaxArena> Arena) {
    return makeToken(tok::string_interpolation_anchor,
                     OwnedString::makeUnowned(")"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 247 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"
  TokenSyntax
  SyntaxFactory::makeYieldToken(const Trivia &LeadingTrivia,
                                        const Trivia &TrailingTrivia,
                                        RC<SyntaxArena> Arena) {
    return makeToken(tok::kw_yield,
                     OwnedString::makeUnowned("yield"),
                     LeadingTrivia, TrailingTrivia,
                     SourcePresence::Present, Arena);
  }
#line 268 "/Users/zhuzhenhua/Documents/SwiftSourceCode/swift/lib/Syntax/SyntaxFactory.cpp.gyb"

TupleTypeSyntax SyntaxFactory::makeVoidTupleType(RC<SyntaxArena> Arena) {
  return makeTupleType(makeLeftParenToken({}, {}, Arena),
                       makeBlankTupleTypeElementList(Arena),
                       makeRightParenToken({}, {}, Arena),
                       Arena);
}

TupleTypeElementSyntax
SyntaxFactory::makeTupleTypeElement(llvm::Optional<TokenSyntax> Label,
                                    llvm::Optional<TokenSyntax> Colon,
                                    TypeSyntax Type,
                                    llvm::Optional<TokenSyntax> TrailingComma,
                                    RC<SyntaxArena> Arena) {
  return makeTupleTypeElement(None, Label, None, Colon, Type, None, None,
                              TrailingComma, Arena);
}

TupleTypeElementSyntax
SyntaxFactory::makeTupleTypeElement(TypeSyntax Type,
                                    llvm::Optional<TokenSyntax> TrailingComma,
                                    RC<SyntaxArena> Arena) {
  return makeTupleTypeElement(None, None, None, None, Type, None, None,
                              TrailingComma, Arena);
}

GenericParameterSyntax
SyntaxFactory::makeGenericParameter(TokenSyntax Name,
                                    llvm::Optional<TokenSyntax> TrailingComma,
                                    RC<SyntaxArena> Arena) {
  return makeGenericParameter(None, Name, None, None, TrailingComma, Arena);
}

TypeSyntax SyntaxFactory::makeTypeIdentifier(OwnedString TypeName,
                                             const Trivia &LeadingTrivia,
                                             const Trivia &TrailingTrivia,
                                             RC<SyntaxArena> Arena) {
  auto identifier =
      makeIdentifier(TypeName, LeadingTrivia, TrailingTrivia, Arena);
  return makeSimpleTypeIdentifier(identifier, None, Arena);
}

TypeSyntax SyntaxFactory::makeAnyTypeIdentifier(const Trivia &LeadingTrivia,
                                                const Trivia &TrailingTrivia,
                                                RC<SyntaxArena> Arena) {
  return makeTypeIdentifier(OwnedString::makeUnowned("Any"), LeadingTrivia,
                            TrailingTrivia, Arena);
}

TypeSyntax SyntaxFactory::makeSelfTypeIdentifier(const Trivia &LeadingTrivia,
                                                 const Trivia &TrailingTrivia,
                                                 RC<SyntaxArena> Arena) {
  return makeTypeIdentifier(OwnedString::makeUnowned("Self"),
                            LeadingTrivia, TrailingTrivia, Arena);
}

TokenSyntax SyntaxFactory::makeTypeToken(const Trivia &LeadingTrivia,
                                         const Trivia &TrailingTrivia,
                                         RC<SyntaxArena> Arena) {
  return makeIdentifier(OwnedString::makeUnowned("Type"),
                        LeadingTrivia, TrailingTrivia, Arena);
}

TokenSyntax SyntaxFactory::makeProtocolToken(const Trivia &LeadingTrivia,
                                             const Trivia &TrailingTrivia,
                                             RC<SyntaxArena> Arena) {
  return makeIdentifier(OwnedString::makeUnowned("Protocol"),
                        LeadingTrivia, TrailingTrivia, Arena);
}

TokenSyntax SyntaxFactory::makeEqualityOperator(const Trivia &LeadingTrivia,
                                                const Trivia &TrailingTrivia,
                                                RC<SyntaxArena> Arena) {
  return makeToken(tok::oper_binary_spaced, OwnedString::makeUnowned("=="),
                   LeadingTrivia, TrailingTrivia, SourcePresence::Present,
                   Arena);
}
